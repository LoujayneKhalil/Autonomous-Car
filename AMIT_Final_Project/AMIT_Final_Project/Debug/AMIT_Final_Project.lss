
AMIT_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000a74  00000b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000bc  008000bc  00000b64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cf9  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c73  00000000  00000000  00002a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e42  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00004500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000752  00000000  00000000  0000478c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6b  00000000  00000000  00004ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005d49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  8a:	0c 94 38 05 	jmp	0xa70	; 0xa70 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	9b bb       	out	0x1b, r25	; 27
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	98 60       	ori	r25, 0x08	; 8
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	e1 ee       	ldi	r30, 0xE1	; 225
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_send_command+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_send_command+0x1c>
  ae:	00 00       	nop
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	97 7f       	andi	r25, 0xF7	; 247
  b4:	98 bb       	out	0x18, r25	; 24
  b6:	e1 ee       	ldi	r30, 0xE1	; 225
  b8:	f4 e0       	ldi	r31, 0x04	; 4
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_send_command+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_send_command+0x2e>
  c0:	00 00       	nop
  c2:	f0 e1       	ldi	r31, 0x10	; 16
  c4:	8f 9f       	mul	r24, r31
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_send_command+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_send_command+0x4a>
  dc:	00 00       	nop
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	e1 ee       	ldi	r30, 0xE1	; 225
  e6:	f4 e0       	ldi	r31, 0x04	; 4
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_send_command+0x56>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_send_command+0x5c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <lcd_init>:
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	8e 60       	ori	r24, 0x0E	; 14
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	88 b3       	in	r24, 0x18	; 24
 102:	88 60       	ori	r24, 0x08	; 8
 104:	88 bb       	out	0x18, r24	; 24
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_init+0x18>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_init+0x1e>
 110:	00 00       	nop
 112:	88 b3       	in	r24, 0x18	; 24
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	88 bb       	out	0x18, r24	; 24
 118:	81 ee       	ldi	r24, 0xE1	; 225
 11a:	94 e0       	ldi	r25, 0x04	; 4
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x30>
 122:	00 00       	nop
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 12a:	81 ee       	ldi	r24, 0xE1	; 225
 12c:	94 e0       	ldi	r25, 0x04	; 4
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x42>
 134:	00 00       	nop
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 13c:	81 ee       	ldi	r24, 0xE1	; 225
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x4e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_init+0x54>
 146:	00 00       	nop
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 14e:	08 95       	ret

00000150 <lcd_write_character>:
 150:	98 2f       	mov	r25, r24
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	9b bb       	out	0x1b, r25	; 27
 156:	98 b3       	in	r25, 0x18	; 24
 158:	92 60       	ori	r25, 0x02	; 2
 15a:	98 bb       	out	0x18, r25	; 24
 15c:	98 b3       	in	r25, 0x18	; 24
 15e:	98 60       	ori	r25, 0x08	; 8
 160:	98 bb       	out	0x18, r25	; 24
 162:	e1 ee       	ldi	r30, 0xE1	; 225
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_write_character+0x16>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_write_character+0x1c>
 16c:	00 00       	nop
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	97 7f       	andi	r25, 0xF7	; 247
 172:	98 bb       	out	0x18, r25	; 24
 174:	e1 ee       	ldi	r30, 0xE1	; 225
 176:	f4 e0       	ldi	r31, 0x04	; 4
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write_character+0x28>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write_character+0x2e>
 17e:	00 00       	nop
 180:	f0 e1       	ldi	r31, 0x10	; 16
 182:	8f 9f       	mul	r24, r31
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	88 bb       	out	0x18, r24	; 24
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_write_character+0x44>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_write_character+0x4a>
 19a:	00 00       	nop
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	e1 ee       	ldi	r30, 0xE1	; 225
 1a4:	f4 e0       	ldi	r31, 0x04	; 4
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_write_character+0x56>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_write_character+0x5c>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <lcd_write_word>:
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	8c 01       	movw	r16, r24
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <lcd_write_word+0x16>
 1c0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_write_character>
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	f8 01       	movw	r30, r16
 1c8:	ec 0f       	add	r30, r28
 1ca:	fd 1f       	adc	r31, r29
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	f7 cf       	rjmp	.-18     	; 0x1c0 <lcd_write_word+0x10>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <lcd_goto_xy>:
	_delay_ms(5);
}

void lcd_goto_xy(uint8_t line, uint8_t pos)		
{
	lcd_send_command((0x80 | (line << 6)) + pos);
 1dc:	20 e4       	ldi	r18, 0x40	; 64
 1de:	82 9f       	mul	r24, r18
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	86 0f       	add	r24, r22
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_goto_xy+0x12>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_goto_xy+0x18>
 1f4:	08 95       	ret

000001f6 <enable_ex_interrupt>:
}

void enable_ex_interrupt(void) 
{

	MCUCR |= (1 << ISC00);		// Trigger INT0 on any logic change.
 1f6:	85 b7       	in	r24, 0x35	; 53
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);		// Enable INT0 interrupts.
 1fc:	8b b7       	in	r24, 0x3b	; 59
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	8b bf       	out	0x3b, r24	; 59
 202:	08 95       	ret

00000204 <ultrasonic_init>:
uint8_t distance_str[10];

//initialize ultrasonic
void ultrasonic_init(void) 
{		
	TRIGER_DDR |= (1 << TRIGER);
 204:	81 b3       	in	r24, 0x11	; 17
 206:	81 60       	ori	r24, 0x01	; 1
 208:	81 bb       	out	0x11, r24	; 17
	ECHO_DDR &= ~(1 << ECHO);
 20a:	81 b3       	in	r24, 0x11	; 17
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	81 bb       	out	0x11, r24	; 17
	ECHO_PULLUP |= (1 << ECHO);
 210:	82 b3       	in	r24, 0x12	; 18
 212:	84 60       	ori	r24, 0x04	; 4
 214:	82 bb       	out	0x12, r24	; 18
	enable_ex_interrupt();
 216:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <enable_ex_interrupt>
	timer0_init();			//overflow mode
 21a:	0e 94 42 04 	call	0x884	; 0x884 <timer0_init>
 21e:	08 95       	ret

00000220 <ultra_triger>:
	return;
}

void ultra_triger(void)
{
	if (!sensor_working) 
 220:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <sensor_working>
 224:	81 11       	cpse	r24, r1
 226:	0c c0       	rjmp	.+24     	; 0x240 <ultra_triger+0x20>
	{
		TRIGER_PORT |= (1 << TRIGER);
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <ultra_triger+0x10>
		_delay_us(15);
		TRIGER_PORT &= ~(1 << TRIGER);
 234:	82 b3       	in	r24, 0x12	; 18
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	82 bb       	out	0x12, r24	; 18
		sensor_working = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <sensor_working>
 240:	08 95       	ret

00000242 <__vector_1>:
	}
}

ISR(INT0_vect) {
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	if (sensor_working == 1) {
 264:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <sensor_working>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	09 f0       	breq	.+2      	; 0x26e <__vector_1+0x2c>
 26c:	63 c0       	rjmp	.+198    	; 0x334 <__vector_1+0xf2>
		if (rising_edge == 0) {
 26e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <rising_edge>
 272:	81 11       	cpse	r24, r1
 274:	0d c0       	rjmp	.+26     	; 0x290 <__vector_1+0x4e>
			TCNT0 = 0x00;
 276:	12 be       	out	0x32, r1	; 50
			rising_edge = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <rising_edge>
			timer_counter = 0;
 27e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 282:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__data_end+0x1>
 286:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end+0x2>
 28a:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__data_end+0x3>
 28e:	52 c0       	rjmp	.+164    	; 0x334 <__vector_1+0xf2>
		} else {
			distance = (timer_counter * 256 + TCNT0) / (466*2);
 290:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 294:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <__data_end+0x1>
 298:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <__data_end+0x2>
 29c:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <__data_end+0x3>
 2a0:	ba 2f       	mov	r27, r26
 2a2:	a9 2f       	mov	r26, r25
 2a4:	98 2f       	mov	r25, r24
 2a6:	88 27       	eor	r24, r24
 2a8:	22 b7       	in	r18, 0x32	; 50
 2aa:	bc 01       	movw	r22, r24
 2ac:	cd 01       	movw	r24, r26
 2ae:	62 0f       	add	r22, r18
 2b0:	71 1d       	adc	r23, r1
 2b2:	81 1d       	adc	r24, r1
 2b4:	91 1d       	adc	r25, r1
 2b6:	24 ea       	ldi	r18, 0xA4	; 164
 2b8:	33 e0       	ldi	r19, 0x03	; 3
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__udivmodsi4>
 2c2:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <distance>
 2c6:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <distance+0x1>
 2ca:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <distance+0x2>
 2ce:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <distance+0x3>
			lcd_goto_xy(1, 0);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_goto_xy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2da:	4a e0       	ldi	r20, 0x0A	; 10
 2dc:	66 ec       	ldi	r22, 0xC6	; 198
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 2e4:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 2e8:	0e 94 03 05 	call	0xa06	; 0xa06 <__itoa_ncheck>
			itoa(distance, distance_str, 10);
			strcat(distance_str, " cm ");
 2ec:	a6 ec       	ldi	r26, 0xC6	; 198
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	0d 90       	ld	r0, X+
 2f2:	00 20       	and	r0, r0
 2f4:	e9 f7       	brne	.-6      	; 0x2f0 <__vector_1+0xae>
 2f6:	11 97       	sbiw	r26, 0x01	; 1
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	e7 eb       	ldi	r30, 0xB7	; 183
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	01 90       	ld	r0, Z+
 300:	0d 92       	st	X+, r0
 302:	8a 95       	dec	r24
 304:	e1 f7       	brne	.-8      	; 0x2fe <__vector_1+0xbc>
			lcd_write_word(distance_str);
 306:	86 ec       	ldi	r24, 0xC6	; 198
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	89 ef       	ldi	r24, 0xF9	; 249
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <__vector_1+0xd2>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <__vector_1+0xdc>
 31e:	00 00       	nop
			_delay_ms(40);
			timer_counter = 0;
 320:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 324:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__data_end+0x1>
 328:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end+0x2>
 32c:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__data_end+0x3>
			rising_edge = 0;
 330:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <rising_edge>
		}
	}
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_11>:

ISR(TIMER0_OVF_vect) {
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
	timer_counter++;
 36a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 36e:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <__data_end+0x1>
 372:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <__data_end+0x2>
 376:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <__data_end+0x3>
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	a1 1d       	adc	r26, r1
 37e:	b1 1d       	adc	r27, r1
 380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end>
 384:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <__data_end+0x1>
 388:	a0 93 be 00 	sts	0x00BE, r26	; 0x8000be <__data_end+0x2>
 38c:	b0 93 bf 00 	sts	0x00BF, r27	; 0x8000bf <__data_end+0x3>
	if (timer_counter > 730) {
 390:	8b 3d       	cpi	r24, 0xDB	; 219
 392:	92 40       	sbci	r25, 0x02	; 2
 394:	a1 05       	cpc	r26, r1
 396:	b1 05       	cpc	r27, r1
 398:	68 f0       	brcs	.+26     	; 0x3b4 <__vector_11+0x5e>
		TCNT0 = 0x00;
 39a:	12 be       	out	0x32, r1	; 50
		sensor_working = 0;
 39c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <sensor_working>
		rising_edge = 0;
 3a0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <rising_edge>
		timer_counter = 0;
 3a4:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 3a8:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__data_end+0x1>
 3ac:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end+0x2>
 3b0:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__data_end+0x3>
	}
}
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <main>:
#include "Servo_Motor.h"

extern uint32_t distance;

int main() {
	Dio_init();			            	//initialize DIO
 3c8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Dio_init>
	lcd_init();			            	//initialize LCD
 3cc:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_init>
	ultrasonic_init();	                //initialize ultrasonic
 3d0:	0e 94 02 01 	call	0x204	; 0x204 <ultrasonic_init>
	ServoMotor_Initialization();       	//initialize servo
 3d4:	0e 94 98 04 	call	0x930	; 0x930 <ServoMotor_Initialization>
	MOTOR_init();                       //initialize DC Motor
 3d8:	0e 94 4a 04 	call	0x894	; 0x894 <MOTOR_init>
	sei();
 3dc:	78 94       	sei


	//initial states for start up
	Dio_write(SS, HIGH);					//set H enable 1 (named according to the name of pin on board)
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	0e 94 c0 03 	call	0x780	; 0x780 <Dio_write>
	Dio_write(MOSI, HIGH);					//set H enable 2 (named according to the name of pin on board)
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	8d e0       	ldi	r24, 0x0D	; 13
 3ea:	0e 94 c0 03 	call	0x780	; 0x780 <Dio_write>
    ServoMotor_Rotate(Angle_0);			//set servo initial angle
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	8e e9       	ldi	r24, 0x9E	; 158
 3f8:	94 e2       	ldi	r25, 0x24	; 36
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x32>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(1500);
	

	while (1) {
	
		ultra_triger();			//take reading of ultrasonic and print on LCD
 406:	0e 94 10 01 	call	0x220	; 0x220 <ultra_triger>
 40a:	8f e2       	ldi	r24, 0x2F	; 47
 40c:	95 e7       	ldi	r25, 0x75	; 117
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
		_delay_ms(15);
		ServoMotor_Rotate(Angle_0);
 416:	87 e0       	ldi	r24, 0x07	; 7
 418:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 41c:	9f ef       	ldi	r25, 0xFF	; 255
 41e:	29 e6       	ldi	r18, 0x69	; 105
 420:	88 e1       	ldi	r24, 0x18	; 24
 422:	91 50       	subi	r25, 0x01	; 1
 424:	20 40       	sbci	r18, 0x00	; 0
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
		_delay_ms(1000);
		FORWARD();
 42e:	0e 94 57 04 	call	0x8ae	; 0x8ae <FORWARD>
 432:	9f ef       	ldi	r25, 0xFF	; 255
 434:	20 e7       	ldi	r18, 0x70	; 112
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	20 40       	sbci	r18, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
		_delay_ms(100);

		if (distance <= 30) {
 444:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 448:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 44c:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <distance+0x2>
 450:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <distance+0x3>
 454:	4f 97       	sbiw	r24, 0x1f	; 31
 456:	a1 05       	cpc	r26, r1
 458:	b1 05       	cpc	r27, r1
 45a:	a8 f6       	brcc	.-86     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			STOP();
 45c:	0e 94 8b 04 	call	0x916	; 0x916 <STOP>
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	24 e3       	ldi	r18, 0x34	; 52
 464:	8c e0       	ldi	r24, 0x0C	; 12
 466:	91 50       	subi	r25, 0x01	; 1
 468:	20 40       	sbci	r18, 0x00	; 0
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
			_delay_ms(500);
			ServoMotor_Rotate(Angle_N90);		//look left  -90
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 478:	9f ef       	ldi	r25, 0xFF	; 255
 47a:	29 e6       	ldi	r18, 0x69	; 105
 47c:	88 e1       	ldi	r24, 0x18	; 24
 47e:	91 50       	subi	r25, 0x01	; 1
 480:	20 40       	sbci	r18, 0x00	; 0
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 488:	00 00       	nop
			_delay_ms(1000);
			ultra_triger();
 48a:	0e 94 10 01 	call	0x220	; 0x220 <ultra_triger>
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	20 e7       	ldi	r18, 0x70	; 112
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	91 50       	subi	r25, 0x01	; 1
 496:	20 40       	sbci	r18, 0x00	; 0
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
			_delay_ms(100);
			if (distance <= 30) {
 4a0:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 4a4:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 4a8:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <distance+0x2>
 4ac:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <distance+0x3>
 4b0:	4f 97       	sbiw	r24, 0x1f	; 31
 4b2:	a1 05       	cpc	r26, r1
 4b4:	b1 05       	cpc	r27, r1
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b8:	6b c0       	rjmp	.+214    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
				ServoMotor_Rotate(Angle_P90);	//look right +90
 4ba:	8a e0       	ldi	r24, 0x0A	; 10
 4bc:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
 4c2:	29 e6       	ldi	r18, 0x69	; 105
 4c4:	88 e1       	ldi	r24, 0x18	; 24
 4c6:	91 50       	subi	r25, 0x01	; 1
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d0:	00 00       	nop
				_delay_ms(1000);
				ultra_triger();
 4d2:	0e 94 10 01 	call	0x220	; 0x220 <ultra_triger>
 4d6:	9f ef       	ldi	r25, 0xFF	; 255
 4d8:	24 e3       	ldi	r18, 0x34	; 52
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	91 50       	subi	r25, 0x01	; 1
 4de:	20 40       	sbci	r18, 0x00	; 0
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e6:	00 00       	nop
				_delay_ms(500);
				if (distance <= 30) {
 4e8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 4ec:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 4f0:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <distance+0x2>
 4f4:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <distance+0x3>
 4f8:	4f 97       	sbiw	r24, 0x1f	; 31
 4fa:	a1 05       	cpc	r26, r1
 4fc:	b1 05       	cpc	r27, r1
 4fe:	70 f5       	brcc	.+92     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
					ServoMotor_Rotate(Angle_P90); 
 500:	8a e0       	ldi	r24, 0x0A	; 10
 502:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 506:	9f ef       	ldi	r25, 0xFF	; 255
 508:	20 e7       	ldi	r18, 0x70	; 112
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	91 50       	subi	r25, 0x01	; 1
 50e:	20 40       	sbci	r18, 0x00	; 0
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 516:	00 00       	nop
					_delay_ms(100);
					BACKWARD();
 518:	0e 94 64 04 	call	0x8c8	; 0x8c8 <BACKWARD>
 51c:	9f ef       	ldi	r25, 0xFF	; 255
 51e:	24 e3       	ldi	r18, 0x34	; 52
 520:	8c e0       	ldi	r24, 0x0C	; 12
 522:	91 50       	subi	r25, 0x01	; 1
 524:	20 40       	sbci	r18, 0x00	; 0
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52c:	00 00       	nop
					_delay_ms(500);
					RIGHT();
 52e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <RIGHT>
 532:	9f ef       	ldi	r25, 0xFF	; 255
 534:	20 e7       	ldi	r18, 0x70	; 112
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	91 50       	subi	r25, 0x01	; 1
 53a:	20 40       	sbci	r18, 0x00	; 0
 53c:	80 40       	sbci	r24, 0x00	; 0
 53e:	e1 f7       	brne	.-8      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 540:	00 c0       	rjmp	.+0      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 542:	00 00       	nop
					_delay_ms(100);
					STOP();
 544:	0e 94 8b 04 	call	0x916	; 0x916 <STOP>
 548:	9f ef       	ldi	r25, 0xFF	; 255
 54a:	20 e7       	ldi	r18, 0x70	; 112
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	20 40       	sbci	r18, 0x00	; 0
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 558:	00 00       	nop
 55a:	55 cf       	rjmp	.-342    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
					_delay_ms(100);
				} else {
					LEFT();
 55c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LEFT>
 560:	9f e7       	ldi	r25, 0x7F	; 127
 562:	2a e1       	ldi	r18, 0x1A	; 26
 564:	86 e0       	ldi	r24, 0x06	; 6
 566:	91 50       	subi	r25, 0x01	; 1
 568:	20 40       	sbci	r18, 0x00	; 0
 56a:	80 40       	sbci	r24, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 570:	00 00       	nop
					_delay_ms(250);
					STOP();
 572:	0e 94 8b 04 	call	0x916	; 0x916 <STOP>
					ServoMotor_Rotate(Angle_N90); //look left
 576:	85 e0       	ldi	r24, 0x05	; 5
 578:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	20 e7       	ldi	r18, 0x70	; 112
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	91 50       	subi	r25, 0x01	; 1
 584:	20 40       	sbci	r18, 0x00	; 0
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 58c:	00 00       	nop
 58e:	3b cf       	rjmp	.-394    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
					_delay_ms(100);
				}
			} else {
				RIGHT();
 590:	0e 94 7e 04 	call	0x8fc	; 0x8fc <RIGHT>
 594:	9f e7       	ldi	r25, 0x7F	; 127
 596:	2a e1       	ldi	r18, 0x1A	; 26
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	91 50       	subi	r25, 0x01	; 1
 59c:	20 40       	sbci	r18, 0x00	; 0
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	e1 f7       	brne	.-8      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a4:	00 00       	nop
				_delay_ms(250);
				STOP();
 5a6:	0e 94 8b 04 	call	0x916	; 0x916 <STOP>
				ServoMotor_Rotate(Angle_0);
 5aa:	87 e0       	ldi	r24, 0x07	; 7
 5ac:	0e 94 bb 04 	call	0x976	; 0x976 <ServoMotor_Rotate>
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	20 e7       	ldi	r18, 0x70	; 112
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	91 50       	subi	r25, 0x01	; 1
 5b8:	20 40       	sbci	r18, 0x00	; 0
 5ba:	80 40       	sbci	r24, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 5c0:	00 00       	nop
 5c2:	21 cf       	rjmp	.-446    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>

000005c4 <Dio_init>:

extern pin_config_type pin_config[32];

void Dio_init(void) {
	int i = 0;
	for (i = 0; i < (sizeof(pin_config) / sizeof(pin_config[0])); i++) {
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	d6 c0       	rjmp	.+428    	; 0x776 <Dio_init+0x1b2>
		switch (pin_config[i].Port) {
 5ca:	fc 01       	movw	r30, r24
 5cc:	ee 0f       	add	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	e8 0f       	add	r30, r24
 5d2:	f9 1f       	adc	r31, r25
 5d4:	e0 5a       	subi	r30, 0xA0	; 160
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	20 81       	ld	r18, Z
 5da:	21 30       	cpi	r18, 0x01	; 1
 5dc:	c9 f1       	breq	.+114    	; 0x650 <Dio_init+0x8c>
 5de:	38 f0       	brcs	.+14     	; 0x5ee <Dio_init+0x2a>
 5e0:	22 30       	cpi	r18, 0x02	; 2
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <Dio_init+0x22>
 5e4:	66 c0       	rjmp	.+204    	; 0x6b2 <Dio_init+0xee>
 5e6:	23 30       	cpi	r18, 0x03	; 3
 5e8:	09 f4       	brne	.+2      	; 0x5ec <Dio_init+0x28>
 5ea:	94 c0       	rjmp	.+296    	; 0x714 <Dio_init+0x150>
 5ec:	c3 c0       	rjmp	.+390    	; 0x774 <Dio_init+0x1b0>
		case DIO_PortA:
			if (pin_config[i].Dir == OUTPUT) {
 5ee:	fc 01       	movw	r30, r24
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	e8 0f       	add	r30, r24
 5f6:	f9 1f       	adc	r31, r25
 5f8:	e0 5a       	subi	r30, 0xA0	; 160
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	22 81       	ldd	r18, Z+2	; 0x02
 5fe:	21 30       	cpi	r18, 0x01	; 1
 600:	99 f4       	brne	.+38     	; 0x628 <Dio_init+0x64>
				SET_BIT(DDRA, pin_config[i].Pin);
 602:	4a b3       	in	r20, 0x1a	; 26
 604:	fc 01       	movw	r30, r24
 606:	ee 0f       	add	r30, r30
 608:	ff 1f       	adc	r31, r31
 60a:	e8 0f       	add	r30, r24
 60c:	f9 1f       	adc	r31, r25
 60e:	e0 5a       	subi	r30, 0xA0	; 160
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	01 80       	ldd	r0, Z+1	; 0x01
 618:	02 c0       	rjmp	.+4      	; 0x61e <Dio_init+0x5a>
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <Dio_init+0x56>
 622:	24 2b       	or	r18, r20
 624:	2a bb       	out	0x1a, r18	; 26
 626:	a6 c0       	rjmp	.+332    	; 0x774 <Dio_init+0x1b0>
			} else {
				CLR_BIT(DDRA, pin_config[i].Pin);
 628:	4a b3       	in	r20, 0x1a	; 26
 62a:	fc 01       	movw	r30, r24
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	e8 0f       	add	r30, r24
 632:	f9 1f       	adc	r31, r25
 634:	e0 5a       	subi	r30, 0xA0	; 160
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	01 80       	ldd	r0, Z+1	; 0x01
 63e:	02 c0       	rjmp	.+4      	; 0x644 <Dio_init+0x80>
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <Dio_init+0x7c>
 648:	20 95       	com	r18
 64a:	24 23       	and	r18, r20
 64c:	2a bb       	out	0x1a, r18	; 26
 64e:	92 c0       	rjmp	.+292    	; 0x774 <Dio_init+0x1b0>
			}
			break;
		case DIO_PortB:
			if (pin_config[i].Dir == OUTPUT) {
 650:	fc 01       	movw	r30, r24
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	e8 0f       	add	r30, r24
 658:	f9 1f       	adc	r31, r25
 65a:	e0 5a       	subi	r30, 0xA0	; 160
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	22 81       	ldd	r18, Z+2	; 0x02
 660:	21 30       	cpi	r18, 0x01	; 1
 662:	99 f4       	brne	.+38     	; 0x68a <Dio_init+0xc6>
				SET_BIT(DDRB, pin_config[i].Pin);
 664:	47 b3       	in	r20, 0x17	; 23
 666:	fc 01       	movw	r30, r24
 668:	ee 0f       	add	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	e8 0f       	add	r30, r24
 66e:	f9 1f       	adc	r31, r25
 670:	e0 5a       	subi	r30, 0xA0	; 160
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	01 80       	ldd	r0, Z+1	; 0x01
 67a:	02 c0       	rjmp	.+4      	; 0x680 <Dio_init+0xbc>
 67c:	22 0f       	add	r18, r18
 67e:	33 1f       	adc	r19, r19
 680:	0a 94       	dec	r0
 682:	e2 f7       	brpl	.-8      	; 0x67c <Dio_init+0xb8>
 684:	24 2b       	or	r18, r20
 686:	27 bb       	out	0x17, r18	; 23
 688:	75 c0       	rjmp	.+234    	; 0x774 <Dio_init+0x1b0>
			} else {
				CLR_BIT(DDRB, pin_config[i].Pin);
 68a:	47 b3       	in	r20, 0x17	; 23
 68c:	fc 01       	movw	r30, r24
 68e:	ee 0f       	add	r30, r30
 690:	ff 1f       	adc	r31, r31
 692:	e8 0f       	add	r30, r24
 694:	f9 1f       	adc	r31, r25
 696:	e0 5a       	subi	r30, 0xA0	; 160
 698:	ff 4f       	sbci	r31, 0xFF	; 255
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	01 80       	ldd	r0, Z+1	; 0x01
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Dio_init+0xe2>
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	0a 94       	dec	r0
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <Dio_init+0xde>
 6aa:	20 95       	com	r18
 6ac:	24 23       	and	r18, r20
 6ae:	27 bb       	out	0x17, r18	; 23
 6b0:	61 c0       	rjmp	.+194    	; 0x774 <Dio_init+0x1b0>
			}
			break;
		case DIO_PortC:
			if (pin_config[i].Dir == OUTPUT) {
 6b2:	fc 01       	movw	r30, r24
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	e8 0f       	add	r30, r24
 6ba:	f9 1f       	adc	r31, r25
 6bc:	e0 5a       	subi	r30, 0xA0	; 160
 6be:	ff 4f       	sbci	r31, 0xFF	; 255
 6c0:	22 81       	ldd	r18, Z+2	; 0x02
 6c2:	21 30       	cpi	r18, 0x01	; 1
 6c4:	99 f4       	brne	.+38     	; 0x6ec <Dio_init+0x128>
				SET_BIT(DDRC, pin_config[i].Pin);
 6c6:	44 b3       	in	r20, 0x14	; 20
 6c8:	fc 01       	movw	r30, r24
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	e8 0f       	add	r30, r24
 6d0:	f9 1f       	adc	r31, r25
 6d2:	e0 5a       	subi	r30, 0xA0	; 160
 6d4:	ff 4f       	sbci	r31, 0xFF	; 255
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	01 80       	ldd	r0, Z+1	; 0x01
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <Dio_init+0x11e>
 6de:	22 0f       	add	r18, r18
 6e0:	33 1f       	adc	r19, r19
 6e2:	0a 94       	dec	r0
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <Dio_init+0x11a>
 6e6:	24 2b       	or	r18, r20
 6e8:	24 bb       	out	0x14, r18	; 20
 6ea:	44 c0       	rjmp	.+136    	; 0x774 <Dio_init+0x1b0>
			} else {
				CLR_BIT(DDRC, pin_config[i].Pin);
 6ec:	44 b3       	in	r20, 0x14	; 20
 6ee:	fc 01       	movw	r30, r24
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	e8 0f       	add	r30, r24
 6f6:	f9 1f       	adc	r31, r25
 6f8:	e0 5a       	subi	r30, 0xA0	; 160
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	21 e0       	ldi	r18, 0x01	; 1
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	01 80       	ldd	r0, Z+1	; 0x01
 702:	02 c0       	rjmp	.+4      	; 0x708 <Dio_init+0x144>
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <Dio_init+0x140>
 70c:	20 95       	com	r18
 70e:	24 23       	and	r18, r20
 710:	24 bb       	out	0x14, r18	; 20
 712:	30 c0       	rjmp	.+96     	; 0x774 <Dio_init+0x1b0>
			}
			break;
		case DIO_PortD:
			if (pin_config[i].Dir == OUTPUT) {
 714:	fc 01       	movw	r30, r24
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	e8 0f       	add	r30, r24
 71c:	f9 1f       	adc	r31, r25
 71e:	e0 5a       	subi	r30, 0xA0	; 160
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	22 81       	ldd	r18, Z+2	; 0x02
 724:	21 30       	cpi	r18, 0x01	; 1
 726:	99 f4       	brne	.+38     	; 0x74e <Dio_init+0x18a>
				SET_BIT(DDRD, pin_config[i].Pin);
 728:	41 b3       	in	r20, 0x11	; 17
 72a:	fc 01       	movw	r30, r24
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	e8 0f       	add	r30, r24
 732:	f9 1f       	adc	r31, r25
 734:	e0 5a       	subi	r30, 0xA0	; 160
 736:	ff 4f       	sbci	r31, 0xFF	; 255
 738:	21 e0       	ldi	r18, 0x01	; 1
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	01 80       	ldd	r0, Z+1	; 0x01
 73e:	02 c0       	rjmp	.+4      	; 0x744 <Dio_init+0x180>
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	0a 94       	dec	r0
 746:	e2 f7       	brpl	.-8      	; 0x740 <Dio_init+0x17c>
 748:	24 2b       	or	r18, r20
 74a:	21 bb       	out	0x11, r18	; 17
 74c:	13 c0       	rjmp	.+38     	; 0x774 <Dio_init+0x1b0>
			} else {
				CLR_BIT(DDRD, pin_config[i].Pin);
 74e:	41 b3       	in	r20, 0x11	; 17
 750:	fc 01       	movw	r30, r24
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	e8 0f       	add	r30, r24
 758:	f9 1f       	adc	r31, r25
 75a:	e0 5a       	subi	r30, 0xA0	; 160
 75c:	ff 4f       	sbci	r31, 0xFF	; 255
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	01 80       	ldd	r0, Z+1	; 0x01
 764:	02 c0       	rjmp	.+4      	; 0x76a <Dio_init+0x1a6>
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	0a 94       	dec	r0
 76c:	e2 f7       	brpl	.-8      	; 0x766 <Dio_init+0x1a2>
 76e:	20 95       	com	r18
 770:	24 23       	and	r18, r20
 772:	21 bb       	out	0x11, r18	; 17

extern pin_config_type pin_config[32];

void Dio_init(void) {
	int i = 0;
	for (i = 0; i < (sizeof(pin_config) / sizeof(pin_config[0])); i++) {
 774:	01 96       	adiw	r24, 0x01	; 1
 776:	80 32       	cpi	r24, 0x20	; 32
 778:	91 05       	cpc	r25, r1
 77a:	08 f4       	brcc	.+2      	; 0x77e <Dio_init+0x1ba>
 77c:	26 cf       	rjmp	.-436    	; 0x5ca <Dio_init+0x6>
			break;
		default:
			break;
		}
	}
}
 77e:	08 95       	ret

00000780 <Dio_write>:
 2 -> PORT C
 3 -> PORT D
 */

void Dio_write(Channel_Type channel, state_type state) {
	Dio_port_type Port_variable = channel / 8;
 780:	98 2f       	mov	r25, r24
 782:	96 95       	lsr	r25
 784:	96 95       	lsr	r25
 786:	96 95       	lsr	r25
	Dio_pin_type Pin_num = channel % 8;
 788:	87 70       	andi	r24, 0x07	; 7
	switch (Port_variable) {
 78a:	91 30       	cpi	r25, 0x01	; 1
 78c:	21 f1       	breq	.+72     	; 0x7d6 <Dio_write+0x56>
 78e:	30 f0       	brcs	.+12     	; 0x79c <Dio_write+0x1c>
 790:	92 30       	cpi	r25, 0x02	; 2
 792:	f1 f1       	breq	.+124    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 794:	93 30       	cpi	r25, 0x03	; 3
 796:	09 f4       	brne	.+2      	; 0x79a <Dio_write+0x1a>
 798:	58 c0       	rjmp	.+176    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 79a:	08 95       	ret
	case 0:
		if (state == 1) {
 79c:	61 30       	cpi	r22, 0x01	; 1
 79e:	69 f4       	brne	.+26     	; 0x7ba <Dio_write+0x3a>
			SET_BIT(PORTA, Pin_num);
 7a0:	4b b3       	in	r20, 0x1b	; 27
 7a2:	21 e0       	ldi	r18, 0x01	; 1
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	b9 01       	movw	r22, r18
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <Dio_write+0x2e>
 7aa:	66 0f       	add	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	8a 95       	dec	r24
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <Dio_write+0x2a>
 7b2:	cb 01       	movw	r24, r22
 7b4:	84 2b       	or	r24, r20
 7b6:	8b bb       	out	0x1b, r24	; 27
 7b8:	08 95       	ret
		} else {
			CLR_BIT(PORTA, Pin_num);
 7ba:	4b b3       	in	r20, 0x1b	; 27
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	b9 01       	movw	r22, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <Dio_write+0x48>
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <Dio_write+0x44>
 7cc:	cb 01       	movw	r24, r22
 7ce:	80 95       	com	r24
 7d0:	84 23       	and	r24, r20
 7d2:	8b bb       	out	0x1b, r24	; 27
 7d4:	08 95       	ret
		}
		break;
	case 1:
		if (state == 1) {
 7d6:	61 30       	cpi	r22, 0x01	; 1
 7d8:	69 f4       	brne	.+26     	; 0x7f4 <Dio_write+0x74>
			SET_BIT(PORTB, Pin_num);
 7da:	48 b3       	in	r20, 0x18	; 24
 7dc:	21 e0       	ldi	r18, 0x01	; 1
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	b9 01       	movw	r22, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <Dio_write+0x68>
 7e4:	66 0f       	add	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	8a 95       	dec	r24
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <Dio_write+0x64>
 7ec:	cb 01       	movw	r24, r22
 7ee:	84 2b       	or	r24, r20
 7f0:	88 bb       	out	0x18, r24	; 24
 7f2:	08 95       	ret
		} else {
			CLR_BIT(PORTB, Pin_num);
 7f4:	48 b3       	in	r20, 0x18	; 24
 7f6:	21 e0       	ldi	r18, 0x01	; 1
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	b9 01       	movw	r22, r18
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	8a 95       	dec	r24
 804:	e2 f7       	brpl	.-8      	; 0x7fe <Dio_write+0x7e>
 806:	cb 01       	movw	r24, r22
 808:	80 95       	com	r24
 80a:	84 23       	and	r24, r20
 80c:	88 bb       	out	0x18, r24	; 24
 80e:	08 95       	ret
		}
		break;
	case 2:
		if (state == 1) {
 810:	61 30       	cpi	r22, 0x01	; 1
 812:	69 f4       	brne	.+26     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
			SET_BIT(PORTC, Pin_num);
 814:	45 b3       	in	r20, 0x15	; 21
 816:	21 e0       	ldi	r18, 0x01	; 1
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	b9 01       	movw	r22, r18
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	8a 95       	dec	r24
 824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 826:	cb 01       	movw	r24, r22
 828:	84 2b       	or	r24, r20
 82a:	85 bb       	out	0x15, r24	; 21
 82c:	08 95       	ret
		} else {
			CLR_BIT(PORTC, Pin_num);
 82e:	45 b3       	in	r20, 0x15	; 21
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	b9 01       	movw	r22, r18
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	66 0f       	add	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	8a 95       	dec	r24
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	cb 01       	movw	r24, r22
 842:	80 95       	com	r24
 844:	84 23       	and	r24, r20
 846:	85 bb       	out	0x15, r24	; 21
 848:	08 95       	ret
		}
		break;
	case 3:
		if (state == 1) {
 84a:	61 30       	cpi	r22, 0x01	; 1
 84c:	69 f4       	brne	.+26     	; 0x868 <__stack+0x9>
			SET_BIT(PORTD, Pin_num);
 84e:	42 b3       	in	r20, 0x12	; 18
 850:	21 e0       	ldi	r18, 0x01	; 1
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	b9 01       	movw	r22, r18
 856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 858:	66 0f       	add	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	8a 95       	dec	r24
 85e:	e2 f7       	brpl	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 860:	cb 01       	movw	r24, r22
 862:	84 2b       	or	r24, r20
 864:	82 bb       	out	0x12, r24	; 18
 866:	08 95       	ret
		} else {
			CLR_BIT(PORTD, Pin_num);
 868:	42 b3       	in	r20, 0x12	; 18
 86a:	21 e0       	ldi	r18, 0x01	; 1
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	b9 01       	movw	r22, r18
 870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	8a 95       	dec	r24
 878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
 87a:	cb 01       	movw	r24, r22
 87c:	80 95       	com	r24
 87e:	84 23       	and	r24, r20
 880:	82 bb       	out	0x12, r24	; 18
 882:	08 95       	ret

00000884 <timer0_init>:
#include "timer.h"

void timer0_init(void)	//Initializes Timer0 with 1024 prescaler.
{
	/* Disable Timer 0 */
	TCCR0 = DISABLE_MODULE_VALUE;
 884:	13 be       	out	0x33, r1	; 51
	/* Setting pre scaler */
	TCCR0 = (PRESCLR1_VALUE);
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	83 bf       	out	0x33, r24	; 51
	/* Initializing the timer with zero */
	TCNT0 = ZER0_INITIALIZER;
 88a:	12 be       	out	0x32, r1	; 50
	/* Timer overflow interrupt enable*/
	TIMSK |= (1 << TOIE0);
 88c:	89 b7       	in	r24, 0x39	; 57
 88e:	81 60       	ori	r24, 0x01	; 1
 890:	89 bf       	out	0x39, r24	; 57
 892:	08 95       	ret

00000894 <MOTOR_init>:

/* Functions Definitions */
void MOTOR_init(void) 
{
	/*make MOTOR IN1, IN2 , IN3 and IN4 output */
	SET_BIT(MOTOR_IN1_PORT_DIR, MOTOR_IN1_PIN);
 894:	84 b3       	in	r24, 0x14	; 20
 896:	88 60       	ori	r24, 0x08	; 8
 898:	84 bb       	out	0x14, r24	; 20
	SET_BIT(MOTOR_IN2_PORT_DIR, MOTOR_IN2_PIN);
 89a:	84 b3       	in	r24, 0x14	; 20
 89c:	80 61       	ori	r24, 0x10	; 16
 89e:	84 bb       	out	0x14, r24	; 20

	SET_BIT(MOTOR_IN3_PORT_DIR, MOTOR_IN3_PIN);
 8a0:	84 b3       	in	r24, 0x14	; 20
 8a2:	80 62       	ori	r24, 0x20	; 32
 8a4:	84 bb       	out	0x14, r24	; 20
	SET_BIT(MOTOR_IN4_PORT_DIR, MOTOR_IN4_PIN);
 8a6:	84 b3       	in	r24, 0x14	; 20
 8a8:	80 64       	ori	r24, 0x40	; 64
 8aa:	84 bb       	out	0x14, r24	; 20
 8ac:	08 95       	ret

000008ae <FORWARD>:
}

void FORWARD(void) 
{
	/*set rotation direction of motor*/
	SET_BIT(MOTOR_IN1_PORT, MOTOR_IN1_PIN);		    // HIGH
 8ae:	85 b3       	in	r24, 0x15	; 21
 8b0:	88 60       	ori	r24, 0x08	; 8
 8b2:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN2_PORT, MOTOR_IN2_PIN);			// LOW
 8b4:	85 b3       	in	r24, 0x15	; 21
 8b6:	8f 7e       	andi	r24, 0xEF	; 239
 8b8:	85 bb       	out	0x15, r24	; 21

	SET_BIT(MOTOR_IN3_PORT, MOTOR_IN3_PIN);			 // HIGH
 8ba:	85 b3       	in	r24, 0x15	; 21
 8bc:	80 62       	ori	r24, 0x20	; 32
 8be:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN4_PORT, MOTOR_IN4_PIN);			 // LOW
 8c0:	85 b3       	in	r24, 0x15	; 21
 8c2:	8f 7b       	andi	r24, 0xBF	; 191
 8c4:	85 bb       	out	0x15, r24	; 21
 8c6:	08 95       	ret

000008c8 <BACKWARD>:
}

void BACKWARD(void) 
{
	/*set rotation direction of motor*/
	CLR_BIT(MOTOR_IN1_PORT, MOTOR_IN1_PIN);			// LOW
 8c8:	85 b3       	in	r24, 0x15	; 21
 8ca:	87 7f       	andi	r24, 0xF7	; 247
 8cc:	85 bb       	out	0x15, r24	; 21
	SET_BIT(MOTOR_IN2_PORT, MOTOR_IN2_PIN);			// HIGH
 8ce:	85 b3       	in	r24, 0x15	; 21
 8d0:	80 61       	ori	r24, 0x10	; 16
 8d2:	85 bb       	out	0x15, r24	; 21

	CLR_BIT(MOTOR_IN3_PORT, MOTOR_IN3_PIN);			// LOW
 8d4:	85 b3       	in	r24, 0x15	; 21
 8d6:	8f 7d       	andi	r24, 0xDF	; 223
 8d8:	85 bb       	out	0x15, r24	; 21
	SET_BIT(MOTOR_IN4_PORT, MOTOR_IN4_PIN);			// HIGH
 8da:	85 b3       	in	r24, 0x15	; 21
 8dc:	80 64       	ori	r24, 0x40	; 64
 8de:	85 bb       	out	0x15, r24	; 21
 8e0:	08 95       	ret

000008e2 <LEFT>:

}
void LEFT(void)
 {
	/*set rotation direction of motor*/
	SET_BIT(MOTOR_IN1_PORT, MOTOR_IN1_PIN); // HIGH
 8e2:	85 b3       	in	r24, 0x15	; 21
 8e4:	88 60       	ori	r24, 0x08	; 8
 8e6:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN2_PORT, MOTOR_IN2_PIN); // LOW
 8e8:	85 b3       	in	r24, 0x15	; 21
 8ea:	8f 7e       	andi	r24, 0xEF	; 239
 8ec:	85 bb       	out	0x15, r24	; 21

	CLR_BIT(MOTOR_IN3_PORT, MOTOR_IN3_PIN); // LOW
 8ee:	85 b3       	in	r24, 0x15	; 21
 8f0:	8f 7d       	andi	r24, 0xDF	; 223
 8f2:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN4_PORT, MOTOR_IN4_PIN); // LOW
 8f4:	85 b3       	in	r24, 0x15	; 21
 8f6:	8f 7b       	andi	r24, 0xBF	; 191
 8f8:	85 bb       	out	0x15, r24	; 21
 8fa:	08 95       	ret

000008fc <RIGHT>:
}

void RIGHT(void) 
{
	/*set rotation direction of motor*/
	CLR_BIT(MOTOR_IN1_PORT, MOTOR_IN1_PIN); // LOW
 8fc:	85 b3       	in	r24, 0x15	; 21
 8fe:	87 7f       	andi	r24, 0xF7	; 247
 900:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN2_PORT, MOTOR_IN2_PIN); // LOW
 902:	85 b3       	in	r24, 0x15	; 21
 904:	8f 7e       	andi	r24, 0xEF	; 239
 906:	85 bb       	out	0x15, r24	; 21

	SET_BIT(MOTOR_IN3_PORT, MOTOR_IN3_PIN); // HIGH
 908:	85 b3       	in	r24, 0x15	; 21
 90a:	80 62       	ori	r24, 0x20	; 32
 90c:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN4_PORT, MOTOR_IN4_PIN); // LOW
 90e:	85 b3       	in	r24, 0x15	; 21
 910:	8f 7b       	andi	r24, 0xBF	; 191
 912:	85 bb       	out	0x15, r24	; 21
 914:	08 95       	ret

00000916 <STOP>:

}
void STOP(void) {
	/*set rotation direction of motor*/
	CLR_BIT(MOTOR_IN1_PORT, MOTOR_IN1_PIN); // LOW
 916:	85 b3       	in	r24, 0x15	; 21
 918:	87 7f       	andi	r24, 0xF7	; 247
 91a:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN2_PORT, MOTOR_IN2_PIN); // LOW 
 91c:	85 b3       	in	r24, 0x15	; 21
 91e:	8f 7e       	andi	r24, 0xEF	; 239
 920:	85 bb       	out	0x15, r24	; 21

	CLR_BIT(MOTOR_IN3_PORT, MOTOR_IN3_PIN); // LOW
 922:	85 b3       	in	r24, 0x15	; 21
 924:	8f 7d       	andi	r24, 0xDF	; 223
 926:	85 bb       	out	0x15, r24	; 21
	CLR_BIT(MOTOR_IN4_PORT, MOTOR_IN4_PIN); // LOW
 928:	85 b3       	in	r24, 0x15	; 21
 92a:	8f 7b       	andi	r24, 0xBF	; 191
 92c:	85 bb       	out	0x15, r24	; 21
 92e:	08 95       	ret

00000930 <ServoMotor_Initialization>:

// PWM initialization
void ServoMotor_Initialization(void)
{
	//Define Direction of OC1A
	SET_BIT(DDRD, PD5);
 930:	81 b3       	in	r24, 0x11	; 17
 932:	80 62       	ori	r24, 0x20	; 32
 934:	81 bb       	out	0x11, r24	; 17
	//Choose mode of the timer (Input capture mode)
	SET_BIT(TCCR1B, WGM13);SET_BIT(TCCR1B, WGM12);SET_BIT(TCCR1A, WGM11);CLR_BIT(TCCR1A, WGM10);
 936:	8e b5       	in	r24, 0x2e	; 46
 938:	80 61       	ori	r24, 0x10	; 16
 93a:	8e bd       	out	0x2e, r24	; 46
 93c:	8e b5       	in	r24, 0x2e	; 46
 93e:	88 60       	ori	r24, 0x08	; 8
 940:	8e bd       	out	0x2e, r24	; 46
 942:	8f b5       	in	r24, 0x2f	; 47
 944:	82 60       	ori	r24, 0x02	; 2
 946:	8f bd       	out	0x2f, r24	; 47
 948:	8f b5       	in	r24, 0x2f	; 47
 94a:	8e 7f       	andi	r24, 0xFE	; 254
 94c:	8f bd       	out	0x2f, r24	; 47
	//Choose non-inverting mode
	SET_BIT(TCCR1A, COM1A1);CLR_BIT(TCCR1A, COM1A0);
 94e:	8f b5       	in	r24, 0x2f	; 47
 950:	80 68       	ori	r24, 0x80	; 128
 952:	8f bd       	out	0x2f, r24	; 47
 954:	8f b5       	in	r24, 0x2f	; 47
 956:	8f 7b       	andi	r24, 0xBF	; 191
 958:	8f bd       	out	0x2f, r24	; 47
	//Choose Pre-scaler
	SET_BIT(TCCR1B, CS12);CLR_BIT(TCCR1B, CS11);CLR_BIT(TCCR1B, CS10);
 95a:	8e b5       	in	r24, 0x2e	; 46
 95c:	84 60       	ori	r24, 0x04	; 4
 95e:	8e bd       	out	0x2e, r24	; 46
 960:	8e b5       	in	r24, 0x2e	; 46
 962:	8d 7f       	andi	r24, 0xFD	; 253
 964:	8e bd       	out	0x2e, r24	; 46
 966:	8e b5       	in	r24, 0x2e	; 46
 968:	8e 7f       	andi	r24, 0xFE	; 254
 96a:	8e bd       	out	0x2e, r24	; 46
	//Set new value for top
	ICR1 = 625;
 96c:	81 e7       	ldi	r24, 0x71	; 113
 96e:	92 e0       	ldi	r25, 0x02	; 2
 970:	97 bd       	out	0x27, r25	; 39
 972:	86 bd       	out	0x26, r24	; 38
 974:	08 95       	ret

00000976 <ServoMotor_Rotate>:
}
void ServoMotor_Rotate(uint8_t angle)
{
	OCR1A = ((angle * ICR1) / 100) - 1;
 976:	46 b5       	in	r20, 0x26	; 38
 978:	57 b5       	in	r21, 0x27	; 39
 97a:	28 2f       	mov	r18, r24
 97c:	24 9f       	mul	r18, r20
 97e:	c0 01       	movw	r24, r0
 980:	25 9f       	mul	r18, r21
 982:	90 0d       	add	r25, r0
 984:	11 24       	eor	r1, r1
 986:	9c 01       	movw	r18, r24
 988:	36 95       	lsr	r19
 98a:	27 95       	ror	r18
 98c:	36 95       	lsr	r19
 98e:	27 95       	ror	r18
 990:	ab e7       	ldi	r26, 0x7B	; 123
 992:	b4 e1       	ldi	r27, 0x14	; 20
 994:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__umulhisi3>
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	01 97       	sbiw	r24, 0x01	; 1
 99e:	9b bd       	out	0x2b, r25	; 43
 9a0:	8a bd       	out	0x2a, r24	; 42
 9a2:	08 95       	ret

000009a4 <__udivmodsi4>:
 9a4:	a1 e2       	ldi	r26, 0x21	; 33
 9a6:	1a 2e       	mov	r1, r26
 9a8:	aa 1b       	sub	r26, r26
 9aa:	bb 1b       	sub	r27, r27
 9ac:	fd 01       	movw	r30, r26
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__udivmodsi4_ep>

000009b0 <__udivmodsi4_loop>:
 9b0:	aa 1f       	adc	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	ee 1f       	adc	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	a2 17       	cp	r26, r18
 9ba:	b3 07       	cpc	r27, r19
 9bc:	e4 07       	cpc	r30, r20
 9be:	f5 07       	cpc	r31, r21
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__udivmodsi4_ep>
 9c2:	a2 1b       	sub	r26, r18
 9c4:	b3 0b       	sbc	r27, r19
 9c6:	e4 0b       	sbc	r30, r20
 9c8:	f5 0b       	sbc	r31, r21

000009ca <__udivmodsi4_ep>:
 9ca:	66 1f       	adc	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	1a 94       	dec	r1
 9d4:	69 f7       	brne	.-38     	; 0x9b0 <__udivmodsi4_loop>
 9d6:	60 95       	com	r22
 9d8:	70 95       	com	r23
 9da:	80 95       	com	r24
 9dc:	90 95       	com	r25
 9de:	9b 01       	movw	r18, r22
 9e0:	ac 01       	movw	r20, r24
 9e2:	bd 01       	movw	r22, r26
 9e4:	cf 01       	movw	r24, r30
 9e6:	08 95       	ret

000009e8 <__umulhisi3>:
 9e8:	a2 9f       	mul	r26, r18
 9ea:	b0 01       	movw	r22, r0
 9ec:	b3 9f       	mul	r27, r19
 9ee:	c0 01       	movw	r24, r0
 9f0:	a3 9f       	mul	r26, r19
 9f2:	70 0d       	add	r23, r0
 9f4:	81 1d       	adc	r24, r1
 9f6:	11 24       	eor	r1, r1
 9f8:	91 1d       	adc	r25, r1
 9fa:	b2 9f       	mul	r27, r18
 9fc:	70 0d       	add	r23, r0
 9fe:	81 1d       	adc	r24, r1
 a00:	11 24       	eor	r1, r1
 a02:	91 1d       	adc	r25, r1
 a04:	08 95       	ret

00000a06 <__itoa_ncheck>:
 a06:	bb 27       	eor	r27, r27
 a08:	4a 30       	cpi	r20, 0x0A	; 10
 a0a:	31 f4       	brne	.+12     	; 0xa18 <__itoa_ncheck+0x12>
 a0c:	99 23       	and	r25, r25
 a0e:	22 f4       	brpl	.+8      	; 0xa18 <__itoa_ncheck+0x12>
 a10:	bd e2       	ldi	r27, 0x2D	; 45
 a12:	90 95       	com	r25
 a14:	81 95       	neg	r24
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__utoa_common>

00000a1c <__utoa_ncheck>:
 a1c:	bb 27       	eor	r27, r27

00000a1e <__utoa_common>:
 a1e:	fb 01       	movw	r30, r22
 a20:	55 27       	eor	r21, r21
 a22:	aa 27       	eor	r26, r26
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	aa 1f       	adc	r26, r26
 a2a:	a4 17       	cp	r26, r20
 a2c:	10 f0       	brcs	.+4      	; 0xa32 <__utoa_common+0x14>
 a2e:	a4 1b       	sub	r26, r20
 a30:	83 95       	inc	r24
 a32:	50 51       	subi	r21, 0x10	; 16
 a34:	b9 f7       	brne	.-18     	; 0xa24 <__utoa_common+0x6>
 a36:	a0 5d       	subi	r26, 0xD0	; 208
 a38:	aa 33       	cpi	r26, 0x3A	; 58
 a3a:	08 f0       	brcs	.+2      	; 0xa3e <__utoa_common+0x20>
 a3c:	a9 5d       	subi	r26, 0xD9	; 217
 a3e:	a1 93       	st	Z+, r26
 a40:	00 97       	sbiw	r24, 0x00	; 0
 a42:	79 f7       	brne	.-34     	; 0xa22 <__utoa_common+0x4>
 a44:	b1 11       	cpse	r27, r1
 a46:	b1 93       	st	Z+, r27
 a48:	11 92       	st	Z+, r1
 a4a:	cb 01       	movw	r24, r22
 a4c:	0c 94 28 05 	jmp	0xa50	; 0xa50 <strrev>

00000a50 <strrev>:
 a50:	dc 01       	movw	r26, r24
 a52:	fc 01       	movw	r30, r24
 a54:	67 2f       	mov	r22, r23
 a56:	71 91       	ld	r23, Z+
 a58:	77 23       	and	r23, r23
 a5a:	e1 f7       	brne	.-8      	; 0xa54 <strrev+0x4>
 a5c:	32 97       	sbiw	r30, 0x02	; 2
 a5e:	04 c0       	rjmp	.+8      	; 0xa68 <strrev+0x18>
 a60:	7c 91       	ld	r23, X
 a62:	6d 93       	st	X+, r22
 a64:	70 83       	st	Z, r23
 a66:	62 91       	ld	r22, -Z
 a68:	ae 17       	cp	r26, r30
 a6a:	bf 07       	cpc	r27, r31
 a6c:	c8 f3       	brcs	.-14     	; 0xa60 <strrev+0x10>
 a6e:	08 95       	ret

00000a70 <_exit>:
 a70:	f8 94       	cli

00000a72 <__stop_program>:
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <__stop_program>
