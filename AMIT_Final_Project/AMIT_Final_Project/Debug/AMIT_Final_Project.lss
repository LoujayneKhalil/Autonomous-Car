
AMIT_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000d5a  00000dee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000bc  008000bc  00000e4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7b  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc3  00000000  00000000  00002fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de6  00000000  00000000  00003c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00004a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000724  00000000  00000000  00004cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e23  00000000  00000000  000053f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  8a:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <forward>:
#include "DC.h"

// Set motor to move forward
void forward (void)
{	
	Dio_write(H_A1, HIGH);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	83 e1       	ldi	r24, 0x13	; 19
  96:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A3, LOW);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	85 e1       	ldi	r24, 0x15	; 21
  9e:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A2, LOW);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	84 e1       	ldi	r24, 0x14	; 20
  a6:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A4, HIGH);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	86 e1       	ldi	r24, 0x16	; 22
  ae:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
  b2:	08 95       	ret

000000b4 <backward>:
}

// Set motor to move backward
void backward (void)
{
	Dio_write(H_A1, LOW);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	83 e1       	ldi	r24, 0x13	; 19
  b8:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A3, HIGH);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	85 e1       	ldi	r24, 0x15	; 21
  c0:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A2, HIGH);
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	84 e1       	ldi	r24, 0x14	; 20
  c8:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A4, LOW);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	86 e1       	ldi	r24, 0x16	; 22
  d0:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
  d4:	08 95       	ret

000000d6 <left>:
}

// Set motor to move left
void left (void)
{
	Dio_write(H_A1, HIGH);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	83 e1       	ldi	r24, 0x13	; 19
  da:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A3, HIGH);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	85 e1       	ldi	r24, 0x15	; 21
  e2:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A2, LOW);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	84 e1       	ldi	r24, 0x14	; 20
  ea:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A4, LOW);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	86 e1       	ldi	r24, 0x16	; 22
  f2:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
  f6:	08 95       	ret

000000f8 <right>:

}
// Set motor to move right
void right (void)
{
	Dio_write(H_A1, LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	83 e1       	ldi	r24, 0x13	; 19
  fc:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A3, LOW);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	85 e1       	ldi	r24, 0x15	; 21
 104:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A2, HIGH);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	84 e1       	ldi	r24, 0x14	; 20
 10c:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A4, HIGH);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	86 e1       	ldi	r24, 0x16	; 22
 114:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
 118:	08 95       	ret

0000011a <stop>:

}

// Set motor to stop moving
void stop (void){
	Dio_write(H_A1, LOW);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	83 e1       	ldi	r24, 0x13	; 19
 11e:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A3, LOW);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	85 e1       	ldi	r24, 0x15	; 21
 126:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A2, LOW);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	84 e1       	ldi	r24, 0x14	; 20
 12e:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(H_A4, LOW);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	86 e1       	ldi	r24, 0x16	; 22
 136:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
 13a:	08 95       	ret

0000013c <lcd_send_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	98 2f       	mov	r25, r24
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	9b bb       	out	0x1b, r25	; 27
 142:	98 b3       	in	r25, 0x18	; 24
 144:	9d 7f       	andi	r25, 0xFD	; 253
 146:	98 bb       	out	0x18, r25	; 24
 148:	98 b3       	in	r25, 0x18	; 24
 14a:	98 60       	ori	r25, 0x08	; 8
 14c:	98 bb       	out	0x18, r25	; 24
 14e:	e1 ee       	ldi	r30, 0xE1	; 225
 150:	f4 e0       	ldi	r31, 0x04	; 4
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_send_command+0x16>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_send_command+0x1c>
 158:	00 00       	nop
 15a:	98 b3       	in	r25, 0x18	; 24
 15c:	97 7f       	andi	r25, 0xF7	; 247
 15e:	98 bb       	out	0x18, r25	; 24
 160:	e1 ee       	ldi	r30, 0xE1	; 225
 162:	f4 e0       	ldi	r31, 0x04	; 4
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_send_command+0x28>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_send_command+0x2e>
 16a:	00 00       	nop
 16c:	f0 e1       	ldi	r31, 0x10	; 16
 16e:	8f 9f       	mul	r24, r31
 170:	c0 01       	movw	r24, r0
 172:	11 24       	eor	r1, r1
 174:	8b bb       	out	0x1b, r24	; 27
 176:	88 b3       	in	r24, 0x18	; 24
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	88 bb       	out	0x18, r24	; 24
 17c:	81 ee       	ldi	r24, 0xE1	; 225
 17e:	94 e0       	ldi	r25, 0x04	; 4
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_send_command+0x44>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_send_command+0x4a>
 186:	00 00       	nop
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	e1 ee       	ldi	r30, 0xE1	; 225
 190:	f4 e0       	ldi	r31, 0x04	; 4
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_send_command+0x56>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_send_command+0x5c>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <lcd_init>:
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	87 b3       	in	r24, 0x17	; 23
 1a2:	8e 60       	ori	r24, 0x0E	; 14
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	94 e0       	ldi	r25, 0x04	; 4
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x18>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init+0x1e>
 1ba:	00 00       	nop
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	87 7f       	andi	r24, 0xF7	; 247
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	81 ee       	ldi	r24, 0xE1	; 225
 1c4:	94 e0       	ldi	r25, 0x04	; 4
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x2a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x30>
 1cc:	00 00       	nop
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_send_command>
 1d4:	81 ee       	ldi	r24, 0xE1	; 225
 1d6:	94 e0       	ldi	r25, 0x04	; 4
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x3c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0x42>
 1de:	00 00       	nop
 1e0:	8f e0       	ldi	r24, 0x0F	; 15
 1e2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_send_command>
 1e6:	81 ee       	ldi	r24, 0xE1	; 225
 1e8:	94 e0       	ldi	r25, 0x04	; 4
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x4e>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x54>
 1f0:	00 00       	nop
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_send_command>
 1f8:	08 95       	ret

000001fa <lcd_write_character>:
 1fa:	98 2f       	mov	r25, r24
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	9b bb       	out	0x1b, r25	; 27
 200:	98 b3       	in	r25, 0x18	; 24
 202:	92 60       	ori	r25, 0x02	; 2
 204:	98 bb       	out	0x18, r25	; 24
 206:	98 b3       	in	r25, 0x18	; 24
 208:	98 60       	ori	r25, 0x08	; 8
 20a:	98 bb       	out	0x18, r25	; 24
 20c:	e1 ee       	ldi	r30, 0xE1	; 225
 20e:	f4 e0       	ldi	r31, 0x04	; 4
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_write_character+0x16>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_write_character+0x1c>
 216:	00 00       	nop
 218:	98 b3       	in	r25, 0x18	; 24
 21a:	97 7f       	andi	r25, 0xF7	; 247
 21c:	98 bb       	out	0x18, r25	; 24
 21e:	e1 ee       	ldi	r30, 0xE1	; 225
 220:	f4 e0       	ldi	r31, 0x04	; 4
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_write_character+0x28>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_write_character+0x2e>
 228:	00 00       	nop
 22a:	f0 e1       	ldi	r31, 0x10	; 16
 22c:	8f 9f       	mul	r24, r31
 22e:	c0 01       	movw	r24, r0
 230:	11 24       	eor	r1, r1
 232:	8b bb       	out	0x1b, r24	; 27
 234:	88 b3       	in	r24, 0x18	; 24
 236:	88 60       	ori	r24, 0x08	; 8
 238:	88 bb       	out	0x18, r24	; 24
 23a:	81 ee       	ldi	r24, 0xE1	; 225
 23c:	94 e0       	ldi	r25, 0x04	; 4
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_write_character+0x44>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_write_character+0x4a>
 244:	00 00       	nop
 246:	88 b3       	in	r24, 0x18	; 24
 248:	87 7f       	andi	r24, 0xF7	; 247
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	e1 ee       	ldi	r30, 0xE1	; 225
 24e:	f4 e0       	ldi	r31, 0x04	; 4
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_write_character+0x56>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_write_character+0x5c>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <lcd_write_word>:
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8c 01       	movw	r16, r24
 264:	c0 e0       	ldi	r28, 0x00	; 0
 266:	d0 e0       	ldi	r29, 0x00	; 0
 268:	03 c0       	rjmp	.+6      	; 0x270 <lcd_write_word+0x16>
 26a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_write_character>
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	f8 01       	movw	r30, r16
 272:	ec 0f       	add	r30, r28
 274:	fd 1f       	adc	r31, r29
 276:	80 81       	ld	r24, Z
 278:	81 11       	cpse	r24, r1
 27a:	f7 cf       	rjmp	.-18     	; 0x26a <lcd_write_word+0x10>
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <lcd_goto_xy>:
	_delay_ms(5);
}

void lcd_goto_xy(uint8_t line, uint8_t pos)		
{
	lcd_send_command((0x80 | (line << 6)) + pos);
 286:	20 e4       	ldi	r18, 0x40	; 64
 288:	82 9f       	mul	r24, r18
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	86 0f       	add	r24, r22
 292:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	80 e1       	ldi	r24, 0x10	; 16
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_goto_xy+0x12>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <lcd_goto_xy+0x18>
 29e:	08 95       	ret

000002a0 <tim1_pwm>:

#include "SERVO.h"

void tim1_pwm(void)				//initialize servo
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 2a0:	8f b5       	in	r24, 0x2f	; 47
 2a2:	82 6a       	ori	r24, 0xA2	; 162
 2a4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
 2a6:	8e b5       	in	r24, 0x2e	; 46
 2a8:	8b 61       	ori	r24, 0x1B	; 27
 2aa:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 4999;
 2ac:	87 e8       	ldi	r24, 0x87	; 135
 2ae:	93 e1       	ldi	r25, 0x13	; 19
 2b0:	97 bd       	out	0x27, r25	; 39
 2b2:	86 bd       	out	0x26, r24	; 38
 2b4:	08 95       	ret

000002b6 <servo_write>:
}

float servo_write(uint8_t angle)	//set servo angle
{
	OCR1A = (int) ((angle * 2.78f) + 125);
 2b6:	68 2f       	mov	r22, r24
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 5b 05 	call	0xab6	; 0xab6 <__floatsisf>
 2c2:	25 e8       	ldi	r18, 0x85	; 133
 2c4:	3b ee       	ldi	r19, 0xEB	; 235
 2c6:	41 e3       	ldi	r20, 0x31	; 49
 2c8:	50 e4       	ldi	r21, 0x40	; 64
 2ca:	0e 94 e7 05 	call	0xbce	; 0xbce <__mulsf3>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	4a ef       	ldi	r20, 0xFA	; 250
 2d4:	52 e4       	ldi	r21, 0x42	; 66
 2d6:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
 2da:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixsfsi>
 2de:	7b bd       	out	0x2b, r23	; 43
 2e0:	6a bd       	out	0x2a, r22	; 42
}
 2e2:	08 95       	ret

000002e4 <enable_ex_interrupt>:
	return;
}

void enable_ex_interrupt(void) {

	MCUCR |= (1 << ISC00);		// Trigger INT0 on any logic change.
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);		// Enable INT0 interrupts.
 2ea:	8b b7       	in	r24, 0x3b	; 59
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	8b bf       	out	0x3b, r24	; 59
 2f0:	08 95       	ret

000002f2 <ultrasonic_init>:
uint32_t distance;
uint8_t distance_str[10];

void ultrasonic_init(void) {		//initialize ultrasonic

	TRIGER_DDR |= (1 << TRIGER);
 2f2:	81 b3       	in	r24, 0x11	; 17
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	81 bb       	out	0x11, r24	; 17
	ECHO_DDR &= ~(1 << ECHO);
 2f8:	81 b3       	in	r24, 0x11	; 17
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	81 bb       	out	0x11, r24	; 17
	ECHO_PULLUP |= (1 << ECHO);
 2fe:	82 b3       	in	r24, 0x12	; 18
 300:	84 60       	ori	r24, 0x04	; 4
 302:	82 bb       	out	0x12, r24	; 18
	enable_ex_interrupt();
 304:	0e 94 72 01 	call	0x2e4	; 0x2e4 <enable_ex_interrupt>
	timer0_init();
 308:	0e 94 ae 04 	call	0x95c	; 0x95c <timer0_init>
 30c:	08 95       	ret

0000030e <ultra_triger>:

	return;
}

void ultra_triger(void) {
	if (!sensor_working) {
 30e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <sensor_working>
 312:	81 11       	cpse	r24, r1
 314:	0c c0       	rjmp	.+24     	; 0x32e <ultra_triger+0x20>
		TRIGER_PORT |= (1 << TRIGER);
 316:	82 b3       	in	r24, 0x12	; 18
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	82 bb       	out	0x12, r24	; 18
 31c:	80 e5       	ldi	r24, 0x50	; 80
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <ultra_triger+0x10>
		_delay_us(15);
		TRIGER_PORT &= ~(1 << TRIGER);
 322:	82 b3       	in	r24, 0x12	; 18
 324:	8e 7f       	andi	r24, 0xFE	; 254
 326:	82 bb       	out	0x12, r24	; 18
		sensor_working = 1;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <sensor_working>
 32e:	08 95       	ret

00000330 <__vector_1>:
	}
}

ISR(INT0_vect) {
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	if (sensor_working == 1) {
 352:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <sensor_working>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <__vector_1+0x2c>
 35a:	63 c0       	rjmp	.+198    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		if (rising_edge == 0) {
 35c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <rising_edge>
 360:	81 11       	cpse	r24, r1
 362:	0d c0       	rjmp	.+26     	; 0x37e <__vector_1+0x4e>
			TCNT0 = 0x00;
 364:	12 be       	out	0x32, r1	; 50
			rising_edge = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <rising_edge>
			timer_counter = 0;
 36c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 370:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__data_end+0x1>
 374:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end+0x2>
 378:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__data_end+0x3>
 37c:	52 c0       	rjmp	.+164    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		} else {
			distance = (timer_counter * 256 + TCNT0) / (466*2);
 37e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 382:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <__data_end+0x1>
 386:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <__data_end+0x2>
 38a:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <__data_end+0x3>
 38e:	ba 2f       	mov	r27, r26
 390:	a9 2f       	mov	r26, r25
 392:	98 2f       	mov	r25, r24
 394:	88 27       	eor	r24, r24
 396:	22 b7       	in	r18, 0x32	; 50
 398:	bc 01       	movw	r22, r24
 39a:	cd 01       	movw	r24, r26
 39c:	62 0f       	add	r22, r18
 39e:	71 1d       	adc	r23, r1
 3a0:	81 1d       	adc	r24, r1
 3a2:	91 1d       	adc	r25, r1
 3a4:	24 ea       	ldi	r18, 0xA4	; 164
 3a6:	33 e0       	ldi	r19, 0x03	; 3
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	0e 94 54 06 	call	0xca8	; 0xca8 <__udivmodsi4>
 3b0:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <distance>
 3b4:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <distance+0x1>
 3b8:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <distance+0x2>
 3bc:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <distance+0x3>
			lcd_goto_xy(1, 0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 43 01 	call	0x286	; 0x286 <lcd_goto_xy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	66 ec       	ldi	r22, 0xC6	; 198
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 3d2:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 3d6:	0e 94 76 06 	call	0xcec	; 0xcec <__itoa_ncheck>
			itoa(distance, distance_str, 10);
			strcat(distance_str, " cm ");
 3da:	a6 ec       	ldi	r26, 0xC6	; 198
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	0d 90       	ld	r0, X+
 3e0:	00 20       	and	r0, r0
 3e2:	e9 f7       	brne	.-6      	; 0x3de <__vector_1+0xae>
 3e4:	11 97       	sbiw	r26, 0x01	; 1
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	e7 eb       	ldi	r30, 0xB7	; 183
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	01 90       	ld	r0, Z+
 3ee:	0d 92       	st	X+, r0
 3f0:	8a 95       	dec	r24
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <__vector_1+0xbc>
			lcd_write_word(distance_str);
 3f4:	86 ec       	ldi	r24, 0xC6	; 198
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	83 ef       	ldi	r24, 0xF3	; 243
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
			_delay_ms(40);
			timer_counter = 0;
 40e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 412:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__data_end+0x1>
 416:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end+0x2>
 41a:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__data_end+0x3>
			rising_edge = 0;
 41e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <rising_edge>
		}
	}
}
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_11>:

ISR(TIMER0_OVF_vect) {
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	2f 93       	push	r18
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
	timer_counter++;
 458:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 45c:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <__data_end+0x1>
 460:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <__data_end+0x2>
 464:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <__data_end+0x3>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	a1 1d       	adc	r26, r1
 46c:	b1 1d       	adc	r27, r1
 46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end>
 472:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <__data_end+0x1>
 476:	a0 93 be 00 	sts	0x00BE, r26	; 0x8000be <__data_end+0x2>
 47a:	b0 93 bf 00 	sts	0x00BF, r27	; 0x8000bf <__data_end+0x3>
	if (timer_counter > 730) {
 47e:	8b 3d       	cpi	r24, 0xDB	; 219
 480:	92 40       	sbci	r25, 0x02	; 2
 482:	a1 05       	cpc	r26, r1
 484:	b1 05       	cpc	r27, r1
 486:	68 f0       	brcs	.+26     	; 0x4a2 <__vector_11+0x5e>
		TCNT0 = 0x00;
 488:	12 be       	out	0x32, r1	; 50
		sensor_working = 0;
 48a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <sensor_working>
		rising_edge = 0;
 48e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <rising_edge>
		timer_counter = 0;
 492:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 496:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__data_end+0x1>
 49a:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end+0x2>
 49e:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__data_end+0x3>
	}
}
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <main>:
#include "HAL/DC_Motor/DC.h"

extern uint32_t distance;

int main() {
	Dio_init();				//initialize DIO
 4b6:	0e 94 4e 03 	call	0x69c	; 0x69c <Dio_init>
	lcd_init();				//initialize LCD
 4ba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_init>
	ultrasonic_init();		//initialize ultrasonic
 4be:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ultrasonic_init>
	tim1_pwm();				//initialize servo
 4c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <tim1_pwm>
	sei();
 4c6:	78 94       	sei

	//initial states for start up
	Dio_write(SS, HIGH);		//set H enable 1 (named according to the name of pin on board)
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	8c e0       	ldi	r24, 0x0C	; 12
 4cc:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	Dio_write(MOSI, HIGH);		//set H enable 2 (named according to the name of pin on board)
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	0e 94 2c 04 	call	0x858	; 0x858 <Dio_write>
	servo_write(90);			//set servo initial angle
 4d8:	8a e5       	ldi	r24, 0x5A	; 90
 4da:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	89 e6       	ldi	r24, 0x69	; 105
 4e2:	98 e1       	ldi	r25, 0x18	; 24
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x2e>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x38>
 4ee:	00 00       	nop
	_delay_ms(500);

	while (1) {
		ultra_triger();			//take reading of ultrasonic and print on LCD
 4f0:	0e 94 87 01 	call	0x30e	; 0x30e <ultra_triger>
 4f4:	8f e5       	ldi	r24, 0x5F	; 95
 4f6:	9a ee       	ldi	r25, 0xEA	; 234
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0x42>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x48>
 4fe:	00 00       	nop
		_delay_ms(15);
		servo_write(90);
 500:	8a e5       	ldi	r24, 0x5A	; 90
 502:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
		forward();
 506:	0e 94 49 00 	call	0x92	; 0x92 <forward>
 50a:	9f ef       	ldi	r25, 0xFF	; 255
 50c:	21 ee       	ldi	r18, 0xE1	; 225
 50e:	84 e0       	ldi	r24, 0x04	; 4
 510:	91 50       	subi	r25, 0x01	; 1
 512:	20 40       	sbci	r18, 0x00	; 0
 514:	80 40       	sbci	r24, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <main+0x5a>
 518:	00 c0       	rjmp	.+0      	; 0x51a <main+0x64>
 51a:	00 00       	nop
		_delay_ms(100);

		if (distance <= 30) {
 51c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 520:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 524:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <distance+0x2>
 528:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <distance+0x3>
 52c:	4f 97       	sbiw	r24, 0x1f	; 31
 52e:	a1 05       	cpc	r26, r1
 530:	b1 05       	cpc	r27, r1
 532:	f0 f6       	brcc	.-68     	; 0x4f0 <main+0x3a>
			stop();
 534:	0e 94 8d 00 	call	0x11a	; 0x11a <stop>
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	21 ee       	ldi	r18, 0xE1	; 225
 53c:	84 e0       	ldi	r24, 0x04	; 4
 53e:	91 50       	subi	r25, 0x01	; 1
 540:	20 40       	sbci	r18, 0x00	; 0
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0x88>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x92>
 548:	00 00       	nop
			_delay_ms(100);
			servo_write(45);		//look left
 54a:	8d e2       	ldi	r24, 0x2D	; 45
 54c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
 550:	9f ef       	ldi	r25, 0xFF	; 255
 552:	29 e6       	ldi	r18, 0x69	; 105
 554:	88 e1       	ldi	r24, 0x18	; 24
 556:	91 50       	subi	r25, 0x01	; 1
 558:	20 40       	sbci	r18, 0x00	; 0
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0xa0>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0xaa>
 560:	00 00       	nop
			_delay_ms(500);
			ultra_triger();
 562:	0e 94 87 01 	call	0x30e	; 0x30e <ultra_triger>
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	29 e6       	ldi	r18, 0x69	; 105
 56a:	88 e1       	ldi	r24, 0x18	; 24
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	20 40       	sbci	r18, 0x00	; 0
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <main+0xb6>
 574:	00 c0       	rjmp	.+0      	; 0x576 <main+0xc0>
 576:	00 00       	nop
			_delay_ms(500);
			if (distance <= 30) {
 578:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 57c:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 580:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <distance+0x2>
 584:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <distance+0x3>
 588:	4f 97       	sbiw	r24, 0x1f	; 31
 58a:	a1 05       	cpc	r26, r1
 58c:	b1 05       	cpc	r27, r1
 58e:	08 f0       	brcs	.+2      	; 0x592 <main+0xdc>
 590:	6b c0       	rjmp	.+214    	; 0x668 <main+0x1b2>
				servo_write(135);	//look right
 592:	87 e8       	ldi	r24, 0x87	; 135
 594:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
 598:	9f ef       	ldi	r25, 0xFF	; 255
 59a:	29 e6       	ldi	r18, 0x69	; 105
 59c:	88 e1       	ldi	r24, 0x18	; 24
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	20 40       	sbci	r18, 0x00	; 0
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	e1 f7       	brne	.-8      	; 0x59e <main+0xe8>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <main+0xf2>
 5a8:	00 00       	nop
				_delay_ms(500);
				ultra_triger();
 5aa:	0e 94 87 01 	call	0x30e	; 0x30e <ultra_triger>
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	29 e6       	ldi	r18, 0x69	; 105
 5b2:	88 e1       	ldi	r24, 0x18	; 24
 5b4:	91 50       	subi	r25, 0x01	; 1
 5b6:	20 40       	sbci	r18, 0x00	; 0
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0xfe>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0x108>
 5be:	00 00       	nop
				_delay_ms(500);
				if (distance <= 30) {
 5c0:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <distance>
 5c4:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <distance+0x1>
 5c8:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <distance+0x2>
 5cc:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <distance+0x3>
 5d0:	4f 97       	sbiw	r24, 0x1f	; 31
 5d2:	a1 05       	cpc	r26, r1
 5d4:	b1 05       	cpc	r27, r1
 5d6:	70 f5       	brcc	.+92     	; 0x634 <main+0x17e>
					servo_write(90);
 5d8:	8a e5       	ldi	r24, 0x5A	; 90
 5da:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	21 ee       	ldi	r18, 0xE1	; 225
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	20 40       	sbci	r18, 0x00	; 0
 5e8:	80 40       	sbci	r24, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <main+0x12e>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <main+0x138>
 5ee:	00 00       	nop
					_delay_ms(100);
					backward();
 5f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <backward>
 5f4:	9f ef       	ldi	r25, 0xFF	; 255
 5f6:	23 ed       	ldi	r18, 0xD3	; 211
 5f8:	80 e3       	ldi	r24, 0x30	; 48
 5fa:	91 50       	subi	r25, 0x01	; 1
 5fc:	20 40       	sbci	r18, 0x00	; 0
 5fe:	80 40       	sbci	r24, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x144>
 602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x14e>
 604:	00 00       	nop
					_delay_ms(1000);
					right();
 606:	0e 94 7c 00 	call	0xf8	; 0xf8 <right>
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	24 e3       	ldi	r18, 0x34	; 52
 60e:	8c e0       	ldi	r24, 0x0C	; 12
 610:	91 50       	subi	r25, 0x01	; 1
 612:	20 40       	sbci	r18, 0x00	; 0
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x15a>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x164>
 61a:	00 00       	nop
					_delay_ms(250);
					stop();
 61c:	0e 94 8d 00 	call	0x11a	; 0x11a <stop>
 620:	9f ef       	ldi	r25, 0xFF	; 255
 622:	23 ed       	ldi	r18, 0xD3	; 211
 624:	80 e3       	ldi	r24, 0x30	; 48
 626:	91 50       	subi	r25, 0x01	; 1
 628:	20 40       	sbci	r18, 0x00	; 0
 62a:	80 40       	sbci	r24, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <main+0x170>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <main+0x17a>
 630:	00 00       	nop
 632:	5e cf       	rjmp	.-324    	; 0x4f0 <main+0x3a>
					_delay_ms(1000);
				} else {
					left();
 634:	0e 94 6b 00 	call	0xd6	; 0xd6 <left>
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	24 e3       	ldi	r18, 0x34	; 52
 63c:	8c e0       	ldi	r24, 0x0C	; 12
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	20 40       	sbci	r18, 0x00	; 0
 642:	80 40       	sbci	r24, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <main+0x188>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main+0x192>
 648:	00 00       	nop
					_delay_ms(250);
					stop();
 64a:	0e 94 8d 00 	call	0x11a	; 0x11a <stop>
					servo_write(90);
 64e:	8a e5       	ldi	r24, 0x5A	; 90
 650:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
 654:	9f ef       	ldi	r25, 0xFF	; 255
 656:	23 ed       	ldi	r18, 0xD3	; 211
 658:	80 e3       	ldi	r24, 0x30	; 48
 65a:	91 50       	subi	r25, 0x01	; 1
 65c:	20 40       	sbci	r18, 0x00	; 0
 65e:	80 40       	sbci	r24, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0x1a4>
 662:	00 c0       	rjmp	.+0      	; 0x664 <main+0x1ae>
 664:	00 00       	nop
 666:	44 cf       	rjmp	.-376    	; 0x4f0 <main+0x3a>
					_delay_ms(1000);
				}
			} else {
				right();
 668:	0e 94 7c 00 	call	0xf8	; 0xf8 <right>
 66c:	9f ef       	ldi	r25, 0xFF	; 255
 66e:	24 e3       	ldi	r18, 0x34	; 52
 670:	8c e0       	ldi	r24, 0x0C	; 12
 672:	91 50       	subi	r25, 0x01	; 1
 674:	20 40       	sbci	r18, 0x00	; 0
 676:	80 40       	sbci	r24, 0x00	; 0
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x1bc>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0x1c6>
 67c:	00 00       	nop
				_delay_ms(250);
				stop();
 67e:	0e 94 8d 00 	call	0x11a	; 0x11a <stop>
				servo_write(90);
 682:	8a e5       	ldi	r24, 0x5A	; 90
 684:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <servo_write>
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	23 ed       	ldi	r18, 0xD3	; 211
 68c:	80 e3       	ldi	r24, 0x30	; 48
 68e:	91 50       	subi	r25, 0x01	; 1
 690:	20 40       	sbci	r18, 0x00	; 0
 692:	80 40       	sbci	r24, 0x00	; 0
 694:	e1 f7       	brne	.-8      	; 0x68e <main+0x1d8>
 696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x1e2>
 698:	00 00       	nop
 69a:	2a cf       	rjmp	.-428    	; 0x4f0 <main+0x3a>

0000069c <Dio_init>:

extern pin_config_type pin_config[32];

void Dio_init(void) {
	int i = 0;
	for (i = 0; i < (sizeof(pin_config) / sizeof(pin_config[0])); i++) {
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	d6 c0       	rjmp	.+428    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		switch (pin_config[i].Port) {
 6a2:	fc 01       	movw	r30, r24
 6a4:	ee 0f       	add	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	e8 0f       	add	r30, r24
 6aa:	f9 1f       	adc	r31, r25
 6ac:	e0 5a       	subi	r30, 0xA0	; 160
 6ae:	ff 4f       	sbci	r31, 0xFF	; 255
 6b0:	20 81       	ld	r18, Z
 6b2:	21 30       	cpi	r18, 0x01	; 1
 6b4:	c9 f1       	breq	.+114    	; 0x728 <Dio_init+0x8c>
 6b6:	38 f0       	brcs	.+14     	; 0x6c6 <Dio_init+0x2a>
 6b8:	22 30       	cpi	r18, 0x02	; 2
 6ba:	09 f4       	brne	.+2      	; 0x6be <Dio_init+0x22>
 6bc:	66 c0       	rjmp	.+204    	; 0x78a <Dio_init+0xee>
 6be:	23 30       	cpi	r18, 0x03	; 3
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <Dio_init+0x28>
 6c2:	94 c0       	rjmp	.+296    	; 0x7ec <Dio_init+0x150>
 6c4:	c3 c0       	rjmp	.+390    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		case DIO_PortA:
			if (pin_config[i].Dir == OUTPUT) {
 6c6:	fc 01       	movw	r30, r24
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	e8 0f       	add	r30, r24
 6ce:	f9 1f       	adc	r31, r25
 6d0:	e0 5a       	subi	r30, 0xA0	; 160
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	22 81       	ldd	r18, Z+2	; 0x02
 6d6:	21 30       	cpi	r18, 0x01	; 1
 6d8:	99 f4       	brne	.+38     	; 0x700 <Dio_init+0x64>
				SET_BIT(DDRA, pin_config[i].Pin);
 6da:	4a b3       	in	r20, 0x1a	; 26
 6dc:	fc 01       	movw	r30, r24
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	e8 0f       	add	r30, r24
 6e4:	f9 1f       	adc	r31, r25
 6e6:	e0 5a       	subi	r30, 0xA0	; 160
 6e8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ea:	21 e0       	ldi	r18, 0x01	; 1
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	01 80       	ldd	r0, Z+1	; 0x01
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <Dio_init+0x5a>
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	0a 94       	dec	r0
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <Dio_init+0x56>
 6fa:	24 2b       	or	r18, r20
 6fc:	2a bb       	out	0x1a, r18	; 26
 6fe:	a6 c0       	rjmp	.+332    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			} else {
				CLR_BIT(DDRA, pin_config[i].Pin);
 700:	4a b3       	in	r20, 0x1a	; 26
 702:	fc 01       	movw	r30, r24
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	e8 0f       	add	r30, r24
 70a:	f9 1f       	adc	r31, r25
 70c:	e0 5a       	subi	r30, 0xA0	; 160
 70e:	ff 4f       	sbci	r31, 0xFF	; 255
 710:	21 e0       	ldi	r18, 0x01	; 1
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	01 80       	ldd	r0, Z+1	; 0x01
 716:	02 c0       	rjmp	.+4      	; 0x71c <Dio_init+0x80>
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	0a 94       	dec	r0
 71e:	e2 f7       	brpl	.-8      	; 0x718 <Dio_init+0x7c>
 720:	20 95       	com	r18
 722:	24 23       	and	r18, r20
 724:	2a bb       	out	0x1a, r18	; 26
 726:	92 c0       	rjmp	.+292    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			}
			break;
		case DIO_PortB:
			if (pin_config[i].Dir == OUTPUT) {
 728:	fc 01       	movw	r30, r24
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	e8 0f       	add	r30, r24
 730:	f9 1f       	adc	r31, r25
 732:	e0 5a       	subi	r30, 0xA0	; 160
 734:	ff 4f       	sbci	r31, 0xFF	; 255
 736:	22 81       	ldd	r18, Z+2	; 0x02
 738:	21 30       	cpi	r18, 0x01	; 1
 73a:	99 f4       	brne	.+38     	; 0x762 <Dio_init+0xc6>
				SET_BIT(DDRB, pin_config[i].Pin);
 73c:	47 b3       	in	r20, 0x17	; 23
 73e:	fc 01       	movw	r30, r24
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	e8 0f       	add	r30, r24
 746:	f9 1f       	adc	r31, r25
 748:	e0 5a       	subi	r30, 0xA0	; 160
 74a:	ff 4f       	sbci	r31, 0xFF	; 255
 74c:	21 e0       	ldi	r18, 0x01	; 1
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	01 80       	ldd	r0, Z+1	; 0x01
 752:	02 c0       	rjmp	.+4      	; 0x758 <Dio_init+0xbc>
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <Dio_init+0xb8>
 75c:	24 2b       	or	r18, r20
 75e:	27 bb       	out	0x17, r18	; 23
 760:	75 c0       	rjmp	.+234    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			} else {
				CLR_BIT(DDRB, pin_config[i].Pin);
 762:	47 b3       	in	r20, 0x17	; 23
 764:	fc 01       	movw	r30, r24
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	e8 0f       	add	r30, r24
 76c:	f9 1f       	adc	r31, r25
 76e:	e0 5a       	subi	r30, 0xA0	; 160
 770:	ff 4f       	sbci	r31, 0xFF	; 255
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	01 80       	ldd	r0, Z+1	; 0x01
 778:	02 c0       	rjmp	.+4      	; 0x77e <Dio_init+0xe2>
 77a:	22 0f       	add	r18, r18
 77c:	33 1f       	adc	r19, r19
 77e:	0a 94       	dec	r0
 780:	e2 f7       	brpl	.-8      	; 0x77a <Dio_init+0xde>
 782:	20 95       	com	r18
 784:	24 23       	and	r18, r20
 786:	27 bb       	out	0x17, r18	; 23
 788:	61 c0       	rjmp	.+194    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			}
			break;
		case DIO_PortC:
			if (pin_config[i].Dir == OUTPUT) {
 78a:	fc 01       	movw	r30, r24
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	e8 0f       	add	r30, r24
 792:	f9 1f       	adc	r31, r25
 794:	e0 5a       	subi	r30, 0xA0	; 160
 796:	ff 4f       	sbci	r31, 0xFF	; 255
 798:	22 81       	ldd	r18, Z+2	; 0x02
 79a:	21 30       	cpi	r18, 0x01	; 1
 79c:	99 f4       	brne	.+38     	; 0x7c4 <Dio_init+0x128>
				SET_BIT(DDRC, pin_config[i].Pin);
 79e:	44 b3       	in	r20, 0x14	; 20
 7a0:	fc 01       	movw	r30, r24
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	e8 0f       	add	r30, r24
 7a8:	f9 1f       	adc	r31, r25
 7aa:	e0 5a       	subi	r30, 0xA0	; 160
 7ac:	ff 4f       	sbci	r31, 0xFF	; 255
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	01 80       	ldd	r0, Z+1	; 0x01
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <Dio_init+0x11e>
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <Dio_init+0x11a>
 7be:	24 2b       	or	r18, r20
 7c0:	24 bb       	out	0x14, r18	; 20
 7c2:	44 c0       	rjmp	.+136    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			} else {
				CLR_BIT(DDRC, pin_config[i].Pin);
 7c4:	44 b3       	in	r20, 0x14	; 20
 7c6:	fc 01       	movw	r30, r24
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	e8 0f       	add	r30, r24
 7ce:	f9 1f       	adc	r31, r25
 7d0:	e0 5a       	subi	r30, 0xA0	; 160
 7d2:	ff 4f       	sbci	r31, 0xFF	; 255
 7d4:	21 e0       	ldi	r18, 0x01	; 1
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	01 80       	ldd	r0, Z+1	; 0x01
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <Dio_init+0x144>
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	0a 94       	dec	r0
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <Dio_init+0x140>
 7e4:	20 95       	com	r18
 7e6:	24 23       	and	r18, r20
 7e8:	24 bb       	out	0x14, r18	; 20
 7ea:	30 c0       	rjmp	.+96     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			}
			break;
		case DIO_PortD:
			if (pin_config[i].Dir == OUTPUT) {
 7ec:	fc 01       	movw	r30, r24
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	e8 0f       	add	r30, r24
 7f4:	f9 1f       	adc	r31, r25
 7f6:	e0 5a       	subi	r30, 0xA0	; 160
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	22 81       	ldd	r18, Z+2	; 0x02
 7fc:	21 30       	cpi	r18, 0x01	; 1
 7fe:	99 f4       	brne	.+38     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
				SET_BIT(DDRD, pin_config[i].Pin);
 800:	41 b3       	in	r20, 0x11	; 17
 802:	fc 01       	movw	r30, r24
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31
 808:	e8 0f       	add	r30, r24
 80a:	f9 1f       	adc	r31, r25
 80c:	e0 5a       	subi	r30, 0xA0	; 160
 80e:	ff 4f       	sbci	r31, 0xFF	; 255
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	01 80       	ldd	r0, Z+1	; 0x01
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	0a 94       	dec	r0
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	24 2b       	or	r18, r20
 822:	21 bb       	out	0x11, r18	; 17
 824:	13 c0       	rjmp	.+38     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			} else {
				CLR_BIT(DDRD, pin_config[i].Pin);
 826:	41 b3       	in	r20, 0x11	; 17
 828:	fc 01       	movw	r30, r24
 82a:	ee 0f       	add	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	e8 0f       	add	r30, r24
 830:	f9 1f       	adc	r31, r25
 832:	e0 5a       	subi	r30, 0xA0	; 160
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	01 80       	ldd	r0, Z+1	; 0x01
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	22 0f       	add	r18, r18
 840:	33 1f       	adc	r19, r19
 842:	0a 94       	dec	r0
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	20 95       	com	r18
 848:	24 23       	and	r18, r20
 84a:	21 bb       	out	0x11, r18	; 17

extern pin_config_type pin_config[32];

void Dio_init(void) {
	int i = 0;
	for (i = 0; i < (sizeof(pin_config) / sizeof(pin_config[0])); i++) {
 84c:	01 96       	adiw	r24, 0x01	; 1
 84e:	80 32       	cpi	r24, 0x20	; 32
 850:	91 05       	cpc	r25, r1
 852:	08 f4       	brcc	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 854:	26 cf       	rjmp	.-436    	; 0x6a2 <Dio_init+0x6>
			break;
		default:
			break;
		}
	}
}
 856:	08 95       	ret

00000858 <Dio_write>:
 2 -> PORT C
 3 -> PORT D
 */

void Dio_write(Channel_Type channel, state_type state) {
	Dio_port_type Port_variable = channel / 8;
 858:	98 2f       	mov	r25, r24
 85a:	96 95       	lsr	r25
 85c:	96 95       	lsr	r25
 85e:	96 95       	lsr	r25
	Dio_pin_type Pin_num = channel % 8;
 860:	87 70       	andi	r24, 0x07	; 7
	switch (Port_variable) {
 862:	91 30       	cpi	r25, 0x01	; 1
 864:	21 f1       	breq	.+72     	; 0x8ae <__stack+0x4f>
 866:	30 f0       	brcs	.+12     	; 0x874 <__stack+0x15>
 868:	92 30       	cpi	r25, 0x02	; 2
 86a:	f1 f1       	breq	.+124    	; 0x8e8 <__stack+0x89>
 86c:	93 30       	cpi	r25, 0x03	; 3
 86e:	09 f4       	brne	.+2      	; 0x872 <__stack+0x13>
 870:	58 c0       	rjmp	.+176    	; 0x922 <__stack+0xc3>
 872:	08 95       	ret
	case 0:
		if (state == 1) {
 874:	61 30       	cpi	r22, 0x01	; 1
 876:	69 f4       	brne	.+26     	; 0x892 <__stack+0x33>
			SET_BIT(PORTA, Pin_num);
 878:	4b b3       	in	r20, 0x1b	; 27
 87a:	21 e0       	ldi	r18, 0x01	; 1
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	b9 01       	movw	r22, r18
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	8a 95       	dec	r24
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	cb 01       	movw	r24, r22
 88c:	84 2b       	or	r24, r20
 88e:	8b bb       	out	0x1b, r24	; 27
 890:	08 95       	ret
		} else {
			CLR_BIT(PORTA, Pin_num);
 892:	4b b3       	in	r20, 0x1b	; 27
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	b9 01       	movw	r22, r18
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	8a 95       	dec	r24
 8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
 8a4:	cb 01       	movw	r24, r22
 8a6:	80 95       	com	r24
 8a8:	84 23       	and	r24, r20
 8aa:	8b bb       	out	0x1b, r24	; 27
 8ac:	08 95       	ret
		}
		break;
	case 1:
		if (state == 1) {
 8ae:	61 30       	cpi	r22, 0x01	; 1
 8b0:	69 f4       	brne	.+26     	; 0x8cc <__stack+0x6d>
			SET_BIT(PORTB, Pin_num);
 8b2:	48 b3       	in	r20, 0x18	; 24
 8b4:	21 e0       	ldi	r18, 0x01	; 1
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	b9 01       	movw	r22, r18
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	66 0f       	add	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	8a 95       	dec	r24
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	cb 01       	movw	r24, r22
 8c6:	84 2b       	or	r24, r20
 8c8:	88 bb       	out	0x18, r24	; 24
 8ca:	08 95       	ret
		} else {
			CLR_BIT(PORTB, Pin_num);
 8cc:	48 b3       	in	r20, 0x18	; 24
 8ce:	21 e0       	ldi	r18, 0x01	; 1
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	b9 01       	movw	r22, r18
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	66 0f       	add	r22, r22
 8d8:	77 1f       	adc	r23, r23
 8da:	8a 95       	dec	r24
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	cb 01       	movw	r24, r22
 8e0:	80 95       	com	r24
 8e2:	84 23       	and	r24, r20
 8e4:	88 bb       	out	0x18, r24	; 24
 8e6:	08 95       	ret
		}
		break;
	case 2:
		if (state == 1) {
 8e8:	61 30       	cpi	r22, 0x01	; 1
 8ea:	69 f4       	brne	.+26     	; 0x906 <__stack+0xa7>
			SET_BIT(PORTC, Pin_num);
 8ec:	45 b3       	in	r20, 0x15	; 21
 8ee:	21 e0       	ldi	r18, 0x01	; 1
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	b9 01       	movw	r22, r18
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	8a 95       	dec	r24
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
 8fe:	cb 01       	movw	r24, r22
 900:	84 2b       	or	r24, r20
 902:	85 bb       	out	0x15, r24	; 21
 904:	08 95       	ret
		} else {
			CLR_BIT(PORTC, Pin_num);
 906:	45 b3       	in	r20, 0x15	; 21
 908:	21 e0       	ldi	r18, 0x01	; 1
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	b9 01       	movw	r22, r18
 90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
 910:	66 0f       	add	r22, r22
 912:	77 1f       	adc	r23, r23
 914:	8a 95       	dec	r24
 916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0xb1>
 918:	cb 01       	movw	r24, r22
 91a:	80 95       	com	r24
 91c:	84 23       	and	r24, r20
 91e:	85 bb       	out	0x15, r24	; 21
 920:	08 95       	ret
		}
		break;
	case 3:
		if (state == 1) {
 922:	61 30       	cpi	r22, 0x01	; 1
 924:	69 f4       	brne	.+26     	; 0x940 <__stack+0xe1>
			SET_BIT(PORTD, Pin_num);
 926:	42 b3       	in	r20, 0x12	; 18
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	b9 01       	movw	r22, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	8a 95       	dec	r24
 936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0xd1>
 938:	cb 01       	movw	r24, r22
 93a:	84 2b       	or	r24, r20
 93c:	82 bb       	out	0x12, r24	; 18
 93e:	08 95       	ret
		} else {
			CLR_BIT(PORTD, Pin_num);
 940:	42 b3       	in	r20, 0x12	; 18
 942:	21 e0       	ldi	r18, 0x01	; 1
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	b9 01       	movw	r22, r18
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0xef>
 94a:	66 0f       	add	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	8a 95       	dec	r24
 950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0xeb>
 952:	cb 01       	movw	r24, r22
 954:	80 95       	com	r24
 956:	84 23       	and	r24, r20
 958:	82 bb       	out	0x12, r24	; 18
 95a:	08 95       	ret

0000095c <timer0_init>:
#include "timer.h"

void timer0_init(void)	//Initializes Timer0 with 1024 prescaler.
{
	/* Disable Timer 0 */
	TCCR0 = DISABLE_MODULE_VALUE;
 95c:	13 be       	out	0x33, r1	; 51
	/* Setting pre scaler */
	TCCR0 = (PRESCLR1_VALUE);
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	83 bf       	out	0x33, r24	; 51
	/* Initializing the timer with zero */
	TCNT0 = ZER0_INITIALIZER;
 962:	12 be       	out	0x32, r1	; 50
	/* Timer overflow interrupt enable*/
	TIMSK |= (1 << TOIE0);
 964:	89 b7       	in	r24, 0x39	; 57
 966:	81 60       	ori	r24, 0x01	; 1
 968:	89 bf       	out	0x39, r24	; 57
 96a:	08 95       	ret

0000096c <__subsf3>:
 96c:	50 58       	subi	r21, 0x80	; 128

0000096e <__addsf3>:
 96e:	bb 27       	eor	r27, r27
 970:	aa 27       	eor	r26, r26
 972:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
 976:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_round>
 97a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_pscA>
 97e:	38 f0       	brcs	.+14     	; 0x98e <__addsf3+0x20>
 980:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscB>
 984:	20 f0       	brcs	.+8      	; 0x98e <__addsf3+0x20>
 986:	39 f4       	brne	.+14     	; 0x996 <__addsf3+0x28>
 988:	9f 3f       	cpi	r25, 0xFF	; 255
 98a:	19 f4       	brne	.+6      	; 0x992 <__addsf3+0x24>
 98c:	26 f4       	brtc	.+8      	; 0x996 <__addsf3+0x28>
 98e:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_nan>
 992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3+0x28>
 994:	e0 95       	com	r30
 996:	e7 fb       	bst	r30, 7
 998:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>

0000099c <__addsf3x>:
 99c:	e9 2f       	mov	r30, r25
 99e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_split3>
 9a2:	58 f3       	brcs	.-42     	; 0x97a <__addsf3+0xc>
 9a4:	ba 17       	cp	r27, r26
 9a6:	62 07       	cpc	r22, r18
 9a8:	73 07       	cpc	r23, r19
 9aa:	84 07       	cpc	r24, r20
 9ac:	95 07       	cpc	r25, r21
 9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__addsf3x+0x1c>
 9b0:	79 f4       	brne	.+30     	; 0x9d0 <__addsf3x+0x34>
 9b2:	a6 f5       	brtc	.+104    	; 0xa1c <__addsf3x+0x80>
 9b4:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_zero>
 9b8:	0e f4       	brtc	.+2      	; 0x9bc <__addsf3x+0x20>
 9ba:	e0 95       	com	r30
 9bc:	0b 2e       	mov	r0, r27
 9be:	ba 2f       	mov	r27, r26
 9c0:	a0 2d       	mov	r26, r0
 9c2:	0b 01       	movw	r0, r22
 9c4:	b9 01       	movw	r22, r18
 9c6:	90 01       	movw	r18, r0
 9c8:	0c 01       	movw	r0, r24
 9ca:	ca 01       	movw	r24, r20
 9cc:	a0 01       	movw	r20, r0
 9ce:	11 24       	eor	r1, r1
 9d0:	ff 27       	eor	r31, r31
 9d2:	59 1b       	sub	r21, r25
 9d4:	99 f0       	breq	.+38     	; 0x9fc <__addsf3x+0x60>
 9d6:	59 3f       	cpi	r21, 0xF9	; 249
 9d8:	50 f4       	brcc	.+20     	; 0x9ee <__addsf3x+0x52>
 9da:	50 3e       	cpi	r21, 0xE0	; 224
 9dc:	68 f1       	brcs	.+90     	; 0xa38 <__addsf3x+0x9c>
 9de:	1a 16       	cp	r1, r26
 9e0:	f0 40       	sbci	r31, 0x00	; 0
 9e2:	a2 2f       	mov	r26, r18
 9e4:	23 2f       	mov	r18, r19
 9e6:	34 2f       	mov	r19, r20
 9e8:	44 27       	eor	r20, r20
 9ea:	58 5f       	subi	r21, 0xF8	; 248
 9ec:	f3 cf       	rjmp	.-26     	; 0x9d4 <__addsf3x+0x38>
 9ee:	46 95       	lsr	r20
 9f0:	37 95       	ror	r19
 9f2:	27 95       	ror	r18
 9f4:	a7 95       	ror	r26
 9f6:	f0 40       	sbci	r31, 0x00	; 0
 9f8:	53 95       	inc	r21
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__addsf3x+0x52>
 9fc:	7e f4       	brtc	.+30     	; 0xa1c <__addsf3x+0x80>
 9fe:	1f 16       	cp	r1, r31
 a00:	ba 0b       	sbc	r27, r26
 a02:	62 0b       	sbc	r22, r18
 a04:	73 0b       	sbc	r23, r19
 a06:	84 0b       	sbc	r24, r20
 a08:	ba f0       	brmi	.+46     	; 0xa38 <__addsf3x+0x9c>
 a0a:	91 50       	subi	r25, 0x01	; 1
 a0c:	a1 f0       	breq	.+40     	; 0xa36 <__addsf3x+0x9a>
 a0e:	ff 0f       	add	r31, r31
 a10:	bb 1f       	adc	r27, r27
 a12:	66 1f       	adc	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	c2 f7       	brpl	.-16     	; 0xa0a <__addsf3x+0x6e>
 a1a:	0e c0       	rjmp	.+28     	; 0xa38 <__addsf3x+0x9c>
 a1c:	ba 0f       	add	r27, r26
 a1e:	62 1f       	adc	r22, r18
 a20:	73 1f       	adc	r23, r19
 a22:	84 1f       	adc	r24, r20
 a24:	48 f4       	brcc	.+18     	; 0xa38 <__addsf3x+0x9c>
 a26:	87 95       	ror	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b7 95       	ror	r27
 a2e:	f7 95       	ror	r31
 a30:	9e 3f       	cpi	r25, 0xFE	; 254
 a32:	08 f0       	brcs	.+2      	; 0xa36 <__addsf3x+0x9a>
 a34:	b0 cf       	rjmp	.-160    	; 0x996 <__addsf3+0x28>
 a36:	93 95       	inc	r25
 a38:	88 0f       	add	r24, r24
 a3a:	08 f0       	brcs	.+2      	; 0xa3e <__addsf3x+0xa2>
 a3c:	99 27       	eor	r25, r25
 a3e:	ee 0f       	add	r30, r30
 a40:	97 95       	ror	r25
 a42:	87 95       	ror	r24
 a44:	08 95       	ret

00000a46 <__fixsfsi>:
 a46:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fixunssfsi>
 a4a:	68 94       	set
 a4c:	b1 11       	cpse	r27, r1
 a4e:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_szero>
 a52:	08 95       	ret

00000a54 <__fixunssfsi>:
 a54:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_splitA>
 a58:	88 f0       	brcs	.+34     	; 0xa7c <__fixunssfsi+0x28>
 a5a:	9f 57       	subi	r25, 0x7F	; 127
 a5c:	98 f0       	brcs	.+38     	; 0xa84 <__fixunssfsi+0x30>
 a5e:	b9 2f       	mov	r27, r25
 a60:	99 27       	eor	r25, r25
 a62:	b7 51       	subi	r27, 0x17	; 23
 a64:	b0 f0       	brcs	.+44     	; 0xa92 <__fixunssfsi+0x3e>
 a66:	e1 f0       	breq	.+56     	; 0xaa0 <__fixunssfsi+0x4c>
 a68:	66 0f       	add	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	1a f0       	brmi	.+6      	; 0xa78 <__fixunssfsi+0x24>
 a72:	ba 95       	dec	r27
 a74:	c9 f7       	brne	.-14     	; 0xa68 <__fixunssfsi+0x14>
 a76:	14 c0       	rjmp	.+40     	; 0xaa0 <__fixunssfsi+0x4c>
 a78:	b1 30       	cpi	r27, 0x01	; 1
 a7a:	91 f0       	breq	.+36     	; 0xaa0 <__fixunssfsi+0x4c>
 a7c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_zero>
 a80:	b1 e0       	ldi	r27, 0x01	; 1
 a82:	08 95       	ret
 a84:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_zero>
 a88:	67 2f       	mov	r22, r23
 a8a:	78 2f       	mov	r23, r24
 a8c:	88 27       	eor	r24, r24
 a8e:	b8 5f       	subi	r27, 0xF8	; 248
 a90:	39 f0       	breq	.+14     	; 0xaa0 <__fixunssfsi+0x4c>
 a92:	b9 3f       	cpi	r27, 0xF9	; 249
 a94:	cc f3       	brlt	.-14     	; 0xa88 <__fixunssfsi+0x34>
 a96:	86 95       	lsr	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	b3 95       	inc	r27
 a9e:	d9 f7       	brne	.-10     	; 0xa96 <__fixunssfsi+0x42>
 aa0:	3e f4       	brtc	.+14     	; 0xab0 <__fixunssfsi+0x5c>
 aa2:	90 95       	com	r25
 aa4:	80 95       	com	r24
 aa6:	70 95       	com	r23
 aa8:	61 95       	neg	r22
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	08 95       	ret

00000ab2 <__floatunsisf>:
 ab2:	e8 94       	clt
 ab4:	09 c0       	rjmp	.+18     	; 0xac8 <__floatsisf+0x12>

00000ab6 <__floatsisf>:
 ab6:	97 fb       	bst	r25, 7
 ab8:	3e f4       	brtc	.+14     	; 0xac8 <__floatsisf+0x12>
 aba:	90 95       	com	r25
 abc:	80 95       	com	r24
 abe:	70 95       	com	r23
 ac0:	61 95       	neg	r22
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	99 23       	and	r25, r25
 aca:	a9 f0       	breq	.+42     	; 0xaf6 <__floatsisf+0x40>
 acc:	f9 2f       	mov	r31, r25
 ace:	96 e9       	ldi	r25, 0x96	; 150
 ad0:	bb 27       	eor	r27, r27
 ad2:	93 95       	inc	r25
 ad4:	f6 95       	lsr	r31
 ad6:	87 95       	ror	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f1 11       	cpse	r31, r1
 ae0:	f8 cf       	rjmp	.-16     	; 0xad2 <__floatsisf+0x1c>
 ae2:	fa f4       	brpl	.+62     	; 0xb22 <__floatsisf+0x6c>
 ae4:	bb 0f       	add	r27, r27
 ae6:	11 f4       	brne	.+4      	; 0xaec <__floatsisf+0x36>
 ae8:	60 ff       	sbrs	r22, 0
 aea:	1b c0       	rjmp	.+54     	; 0xb22 <__floatsisf+0x6c>
 aec:	6f 5f       	subi	r22, 0xFF	; 255
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	16 c0       	rjmp	.+44     	; 0xb22 <__floatsisf+0x6c>
 af6:	88 23       	and	r24, r24
 af8:	11 f0       	breq	.+4      	; 0xafe <__floatsisf+0x48>
 afa:	96 e9       	ldi	r25, 0x96	; 150
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <__floatsisf+0x6a>
 afe:	77 23       	and	r23, r23
 b00:	21 f0       	breq	.+8      	; 0xb0a <__floatsisf+0x54>
 b02:	9e e8       	ldi	r25, 0x8E	; 142
 b04:	87 2f       	mov	r24, r23
 b06:	76 2f       	mov	r23, r22
 b08:	05 c0       	rjmp	.+10     	; 0xb14 <__floatsisf+0x5e>
 b0a:	66 23       	and	r22, r22
 b0c:	71 f0       	breq	.+28     	; 0xb2a <__floatsisf+0x74>
 b0e:	96 e8       	ldi	r25, 0x86	; 134
 b10:	86 2f       	mov	r24, r22
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	60 e0       	ldi	r22, 0x00	; 0
 b16:	2a f0       	brmi	.+10     	; 0xb22 <__floatsisf+0x6c>
 b18:	9a 95       	dec	r25
 b1a:	66 0f       	add	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	da f7       	brpl	.-10     	; 0xb18 <__floatsisf+0x62>
 b22:	88 0f       	add	r24, r24
 b24:	96 95       	lsr	r25
 b26:	87 95       	ror	r24
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <__fp_inf>:
 b2c:	97 f9       	bld	r25, 7
 b2e:	9f 67       	ori	r25, 0x7F	; 127
 b30:	80 e8       	ldi	r24, 0x80	; 128
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	60 e0       	ldi	r22, 0x00	; 0
 b36:	08 95       	ret

00000b38 <__fp_nan>:
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	80 ec       	ldi	r24, 0xC0	; 192
 b3c:	08 95       	ret

00000b3e <__fp_pscA>:
 b3e:	00 24       	eor	r0, r0
 b40:	0a 94       	dec	r0
 b42:	16 16       	cp	r1, r22
 b44:	17 06       	cpc	r1, r23
 b46:	18 06       	cpc	r1, r24
 b48:	09 06       	cpc	r0, r25
 b4a:	08 95       	ret

00000b4c <__fp_pscB>:
 b4c:	00 24       	eor	r0, r0
 b4e:	0a 94       	dec	r0
 b50:	12 16       	cp	r1, r18
 b52:	13 06       	cpc	r1, r19
 b54:	14 06       	cpc	r1, r20
 b56:	05 06       	cpc	r0, r21
 b58:	08 95       	ret

00000b5a <__fp_round>:
 b5a:	09 2e       	mov	r0, r25
 b5c:	03 94       	inc	r0
 b5e:	00 0c       	add	r0, r0
 b60:	11 f4       	brne	.+4      	; 0xb66 <__fp_round+0xc>
 b62:	88 23       	and	r24, r24
 b64:	52 f0       	brmi	.+20     	; 0xb7a <__fp_round+0x20>
 b66:	bb 0f       	add	r27, r27
 b68:	40 f4       	brcc	.+16     	; 0xb7a <__fp_round+0x20>
 b6a:	bf 2b       	or	r27, r31
 b6c:	11 f4       	brne	.+4      	; 0xb72 <__fp_round+0x18>
 b6e:	60 ff       	sbrs	r22, 0
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <__fp_round+0x20>
 b72:	6f 5f       	subi	r22, 0xFF	; 255
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	8f 4f       	sbci	r24, 0xFF	; 255
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	08 95       	ret

00000b7c <__fp_split3>:
 b7c:	57 fd       	sbrc	r21, 7
 b7e:	90 58       	subi	r25, 0x80	; 128
 b80:	44 0f       	add	r20, r20
 b82:	55 1f       	adc	r21, r21
 b84:	59 f0       	breq	.+22     	; 0xb9c <__fp_splitA+0x10>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	71 f0       	breq	.+28     	; 0xba6 <__fp_splitA+0x1a>
 b8a:	47 95       	ror	r20

00000b8c <__fp_splitA>:
 b8c:	88 0f       	add	r24, r24
 b8e:	97 fb       	bst	r25, 7
 b90:	99 1f       	adc	r25, r25
 b92:	61 f0       	breq	.+24     	; 0xbac <__fp_splitA+0x20>
 b94:	9f 3f       	cpi	r25, 0xFF	; 255
 b96:	79 f0       	breq	.+30     	; 0xbb6 <__fp_splitA+0x2a>
 b98:	87 95       	ror	r24
 b9a:	08 95       	ret
 b9c:	12 16       	cp	r1, r18
 b9e:	13 06       	cpc	r1, r19
 ba0:	14 06       	cpc	r1, r20
 ba2:	55 1f       	adc	r21, r21
 ba4:	f2 cf       	rjmp	.-28     	; 0xb8a <__fp_split3+0xe>
 ba6:	46 95       	lsr	r20
 ba8:	f1 df       	rcall	.-30     	; 0xb8c <__fp_splitA>
 baa:	08 c0       	rjmp	.+16     	; 0xbbc <__fp_splitA+0x30>
 bac:	16 16       	cp	r1, r22
 bae:	17 06       	cpc	r1, r23
 bb0:	18 06       	cpc	r1, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	f1 cf       	rjmp	.-30     	; 0xb98 <__fp_splitA+0xc>
 bb6:	86 95       	lsr	r24
 bb8:	71 05       	cpc	r23, r1
 bba:	61 05       	cpc	r22, r1
 bbc:	08 94       	sec
 bbe:	08 95       	ret

00000bc0 <__fp_zero>:
 bc0:	e8 94       	clt

00000bc2 <__fp_szero>:
 bc2:	bb 27       	eor	r27, r27
 bc4:	66 27       	eor	r22, r22
 bc6:	77 27       	eor	r23, r23
 bc8:	cb 01       	movw	r24, r22
 bca:	97 f9       	bld	r25, 7
 bcc:	08 95       	ret

00000bce <__mulsf3>:
 bce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3x>
 bd2:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_round>
 bd6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_pscA>
 bda:	38 f0       	brcs	.+14     	; 0xbea <__mulsf3+0x1c>
 bdc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscB>
 be0:	20 f0       	brcs	.+8      	; 0xbea <__mulsf3+0x1c>
 be2:	95 23       	and	r25, r21
 be4:	11 f0       	breq	.+4      	; 0xbea <__mulsf3+0x1c>
 be6:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>
 bea:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_nan>
 bee:	11 24       	eor	r1, r1
 bf0:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_szero>

00000bf4 <__mulsf3x>:
 bf4:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_split3>
 bf8:	70 f3       	brcs	.-36     	; 0xbd6 <__mulsf3+0x8>

00000bfa <__mulsf3_pse>:
 bfa:	95 9f       	mul	r25, r21
 bfc:	c1 f3       	breq	.-16     	; 0xbee <__mulsf3+0x20>
 bfe:	95 0f       	add	r25, r21
 c00:	50 e0       	ldi	r21, 0x00	; 0
 c02:	55 1f       	adc	r21, r21
 c04:	62 9f       	mul	r22, r18
 c06:	f0 01       	movw	r30, r0
 c08:	72 9f       	mul	r23, r18
 c0a:	bb 27       	eor	r27, r27
 c0c:	f0 0d       	add	r31, r0
 c0e:	b1 1d       	adc	r27, r1
 c10:	63 9f       	mul	r22, r19
 c12:	aa 27       	eor	r26, r26
 c14:	f0 0d       	add	r31, r0
 c16:	b1 1d       	adc	r27, r1
 c18:	aa 1f       	adc	r26, r26
 c1a:	64 9f       	mul	r22, r20
 c1c:	66 27       	eor	r22, r22
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	66 1f       	adc	r22, r22
 c24:	82 9f       	mul	r24, r18
 c26:	22 27       	eor	r18, r18
 c28:	b0 0d       	add	r27, r0
 c2a:	a1 1d       	adc	r26, r1
 c2c:	62 1f       	adc	r22, r18
 c2e:	73 9f       	mul	r23, r19
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	62 1f       	adc	r22, r18
 c36:	83 9f       	mul	r24, r19
 c38:	a0 0d       	add	r26, r0
 c3a:	61 1d       	adc	r22, r1
 c3c:	22 1f       	adc	r18, r18
 c3e:	74 9f       	mul	r23, r20
 c40:	33 27       	eor	r19, r19
 c42:	a0 0d       	add	r26, r0
 c44:	61 1d       	adc	r22, r1
 c46:	23 1f       	adc	r18, r19
 c48:	84 9f       	mul	r24, r20
 c4a:	60 0d       	add	r22, r0
 c4c:	21 1d       	adc	r18, r1
 c4e:	82 2f       	mov	r24, r18
 c50:	76 2f       	mov	r23, r22
 c52:	6a 2f       	mov	r22, r26
 c54:	11 24       	eor	r1, r1
 c56:	9f 57       	subi	r25, 0x7F	; 127
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	9a f0       	brmi	.+38     	; 0xc82 <__mulsf3_pse+0x88>
 c5c:	f1 f0       	breq	.+60     	; 0xc9a <__mulsf3_pse+0xa0>
 c5e:	88 23       	and	r24, r24
 c60:	4a f0       	brmi	.+18     	; 0xc74 <__mulsf3_pse+0x7a>
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	bb 1f       	adc	r27, r27
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	91 50       	subi	r25, 0x01	; 1
 c70:	50 40       	sbci	r21, 0x00	; 0
 c72:	a9 f7       	brne	.-22     	; 0xc5e <__mulsf3_pse+0x64>
 c74:	9e 3f       	cpi	r25, 0xFE	; 254
 c76:	51 05       	cpc	r21, r1
 c78:	80 f0       	brcs	.+32     	; 0xc9a <__mulsf3_pse+0xa0>
 c7a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>
 c7e:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_szero>
 c82:	5f 3f       	cpi	r21, 0xFF	; 255
 c84:	e4 f3       	brlt	.-8      	; 0xc7e <__mulsf3_pse+0x84>
 c86:	98 3e       	cpi	r25, 0xE8	; 232
 c88:	d4 f3       	brlt	.-12     	; 0xc7e <__mulsf3_pse+0x84>
 c8a:	86 95       	lsr	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	b7 95       	ror	r27
 c92:	f7 95       	ror	r31
 c94:	e7 95       	ror	r30
 c96:	9f 5f       	subi	r25, 0xFF	; 255
 c98:	c1 f7       	brne	.-16     	; 0xc8a <__mulsf3_pse+0x90>
 c9a:	fe 2b       	or	r31, r30
 c9c:	88 0f       	add	r24, r24
 c9e:	91 1d       	adc	r25, r1
 ca0:	96 95       	lsr	r25
 ca2:	87 95       	ror	r24
 ca4:	97 f9       	bld	r25, 7
 ca6:	08 95       	ret

00000ca8 <__udivmodsi4>:
 ca8:	a1 e2       	ldi	r26, 0x21	; 33
 caa:	1a 2e       	mov	r1, r26
 cac:	aa 1b       	sub	r26, r26
 cae:	bb 1b       	sub	r27, r27
 cb0:	fd 01       	movw	r30, r26
 cb2:	0d c0       	rjmp	.+26     	; 0xcce <__udivmodsi4_ep>

00000cb4 <__udivmodsi4_loop>:
 cb4:	aa 1f       	adc	r26, r26
 cb6:	bb 1f       	adc	r27, r27
 cb8:	ee 1f       	adc	r30, r30
 cba:	ff 1f       	adc	r31, r31
 cbc:	a2 17       	cp	r26, r18
 cbe:	b3 07       	cpc	r27, r19
 cc0:	e4 07       	cpc	r30, r20
 cc2:	f5 07       	cpc	r31, r21
 cc4:	20 f0       	brcs	.+8      	; 0xcce <__udivmodsi4_ep>
 cc6:	a2 1b       	sub	r26, r18
 cc8:	b3 0b       	sbc	r27, r19
 cca:	e4 0b       	sbc	r30, r20
 ccc:	f5 0b       	sbc	r31, r21

00000cce <__udivmodsi4_ep>:
 cce:	66 1f       	adc	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	99 1f       	adc	r25, r25
 cd6:	1a 94       	dec	r1
 cd8:	69 f7       	brne	.-38     	; 0xcb4 <__udivmodsi4_loop>
 cda:	60 95       	com	r22
 cdc:	70 95       	com	r23
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	9b 01       	movw	r18, r22
 ce4:	ac 01       	movw	r20, r24
 ce6:	bd 01       	movw	r22, r26
 ce8:	cf 01       	movw	r24, r30
 cea:	08 95       	ret

00000cec <__itoa_ncheck>:
 cec:	bb 27       	eor	r27, r27
 cee:	4a 30       	cpi	r20, 0x0A	; 10
 cf0:	31 f4       	brne	.+12     	; 0xcfe <__itoa_ncheck+0x12>
 cf2:	99 23       	and	r25, r25
 cf4:	22 f4       	brpl	.+8      	; 0xcfe <__itoa_ncheck+0x12>
 cf6:	bd e2       	ldi	r27, 0x2D	; 45
 cf8:	90 95       	com	r25
 cfa:	81 95       	neg	r24
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__utoa_common>

00000d02 <__utoa_ncheck>:
 d02:	bb 27       	eor	r27, r27

00000d04 <__utoa_common>:
 d04:	fb 01       	movw	r30, r22
 d06:	55 27       	eor	r21, r21
 d08:	aa 27       	eor	r26, r26
 d0a:	88 0f       	add	r24, r24
 d0c:	99 1f       	adc	r25, r25
 d0e:	aa 1f       	adc	r26, r26
 d10:	a4 17       	cp	r26, r20
 d12:	10 f0       	brcs	.+4      	; 0xd18 <__utoa_common+0x14>
 d14:	a4 1b       	sub	r26, r20
 d16:	83 95       	inc	r24
 d18:	50 51       	subi	r21, 0x10	; 16
 d1a:	b9 f7       	brne	.-18     	; 0xd0a <__utoa_common+0x6>
 d1c:	a0 5d       	subi	r26, 0xD0	; 208
 d1e:	aa 33       	cpi	r26, 0x3A	; 58
 d20:	08 f0       	brcs	.+2      	; 0xd24 <__utoa_common+0x20>
 d22:	a9 5d       	subi	r26, 0xD9	; 217
 d24:	a1 93       	st	Z+, r26
 d26:	00 97       	sbiw	r24, 0x00	; 0
 d28:	79 f7       	brne	.-34     	; 0xd08 <__utoa_common+0x4>
 d2a:	b1 11       	cpse	r27, r1
 d2c:	b1 93       	st	Z+, r27
 d2e:	11 92       	st	Z+, r1
 d30:	cb 01       	movw	r24, r22
 d32:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <strrev>

00000d36 <strrev>:
 d36:	dc 01       	movw	r26, r24
 d38:	fc 01       	movw	r30, r24
 d3a:	67 2f       	mov	r22, r23
 d3c:	71 91       	ld	r23, Z+
 d3e:	77 23       	and	r23, r23
 d40:	e1 f7       	brne	.-8      	; 0xd3a <strrev+0x4>
 d42:	32 97       	sbiw	r30, 0x02	; 2
 d44:	04 c0       	rjmp	.+8      	; 0xd4e <strrev+0x18>
 d46:	7c 91       	ld	r23, X
 d48:	6d 93       	st	X+, r22
 d4a:	70 83       	st	Z, r23
 d4c:	62 91       	ld	r22, -Z
 d4e:	ae 17       	cp	r26, r30
 d50:	bf 07       	cpc	r27, r31
 d52:	c8 f3       	brcs	.-14     	; 0xd46 <strrev+0x10>
 d54:	08 95       	ret

00000d56 <_exit>:
 d56:	f8 94       	cli

00000d58 <__stop_program>:
 d58:	ff cf       	rjmp	.-2      	; 0xd58 <__stop_program>
